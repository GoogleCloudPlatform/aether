; Simple FFI test - call strlen from libc
; This is a minimal test to verify FFI functionality

(DEFINE_MODULE
  (NAME ffi_strlen_test)
  (INTENT "Test basic FFI with strlen from libc")
  
  (CONTENT
    ; Declare strlen from libc
    (DECLARE_EXTERNAL_FUNCTION
      (NAME "strlen")
      (LIBRARY "libc")
      (SYMBOL "strlen")
      (RETURNS (TYPE SIZE_T))
      (ACCEPTS_PARAMETER (NAME "str") (TYPE (POINTER CHAR)) (PASSING BY_VALUE))
      (CALLING_CONVENTION C))
    
    ; Helper function to convert string to C string
    (DEFINE_FUNCTION
      (NAME "string_to_cstr")
      (INTENT "Convert AetherScript string to C string pointer")
      (ACCEPTS_PARAMETER (NAME "s") (TYPE STRING))
      (RETURNS (TYPE (POINTER CHAR)))
      (BODY
        ; For now, assume strings internally have a C representation
        ; In a real implementation, this would handle proper conversion
        (RETURN_VALUE (CAST_TO_TYPE 
          (VARIABLE_REFERENCE "s")
          (TYPE (POINTER CHAR))))))
    
    ; Main function
    (DEFINE_FUNCTION
      (NAME "main")
      (RETURNS (TYPE INT))
      (BODY
        ; Test string
        (DECLARE_VARIABLE (NAME "test_str") (TYPE STRING)
          (INITIAL_VALUE (STRING_LITERAL "Hello, FFI!")))
        
        ; Convert to C string
        (DECLARE_VARIABLE (NAME "c_str") (TYPE (POINTER CHAR))
          (INITIAL_VALUE (CALL_FUNCTION "string_to_cstr"
            (ARGUMENTS (VARIABLE_REFERENCE "test_str")))))
        
        ; Call strlen
        (DECLARE_VARIABLE (NAME "length") (TYPE SIZE_T)
          (INITIAL_VALUE (CALL_FUNCTION "strlen"
            (ARGUMENTS (VARIABLE_REFERENCE "c_str")))))
        
        ; Check result (should be 11)
        (IF_CONDITION (PREDICATE_EQUALS 
            (VARIABLE_REFERENCE "length")
            (INTEGER_LITERAL 11))
          (THEN_EXECUTE
            (RETURN_VALUE (INTEGER_LITERAL 0)))
          (ELSE_EXECUTE
            (RETURN_VALUE (INTEGER_LITERAL 1))))))
  )
)