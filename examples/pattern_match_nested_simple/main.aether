(DEFINE_MODULE
  (NAME pattern_match_nested_simple)
  (INTENT "Simple test for nested pattern matching")
  (CONTENT
    ; Define types
    (DEFINE_ENUMERATION_TYPE
      (NAME Inner)
      (VARIANTS
        (VARIANT InnerA (HOLDS INTEGER))
        (VARIANT InnerB (HOLDS STRING))))
    
    (DEFINE_ENUMERATION_TYPE
      (NAME Outer)
      (VARIANTS
        (VARIANT OuterValue (HOLDS Inner))
        (VARIANT OuterNone)))
    
    ; External function
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING))
      (RETURNS INTEGER))
    
    (DEFINE_FUNCTION
      (NAME test_nested)
      (ACCEPTS_PARAMETER (NAME "value") (TYPE Outer))
      (RETURNS INTEGER)
      (BODY
        (RETURN_VALUE
          (MATCH_EXPRESSION value
            (CASE (OuterValue (InnerA x))
              (CALL_FUNCTION printf (STRING_CONCAT "InnerA: " (TO_STRING x))))
            (CASE (OuterValue (InnerB s))
              (CALL_FUNCTION printf (STRING_CONCAT "InnerB: " s)))
            (CASE (OuterNone)
              (CALL_FUNCTION printf "None"))))))
    
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        ; Test with OuterValue(InnerA(42))
        (DECLARE_VARIABLE (NAME test1) (TYPE Outer))
        (ASSIGN
          (TARGET_VARIABLE test1)
          (SOURCE_EXPRESSION (OuterValue (InnerA 42))))
        
        (CALL_FUNCTION test_nested test1)
        
        (RETURN_VALUE 0)))
  )
)