(DEFINE_MODULE
  (NAME control_flow)
  (INTENT "Demonstrate control flow constructs")
  (CONTENT
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING))
      (RETURNS INTEGER))
    
    (DEFINE_FUNCTION
      (NAME test_if_else)
      (ACCEPTS_PARAMETER (NAME "x") (TYPE INTEGER))
      (RETURNS INTEGER)
      (BODY
        (IF_CONDITION
          (PREDICATE_GREATER_THAN x 10)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "x is greater than 10\n")
            (RETURN_VALUE 1))
          (ELSE_IF_CONDITION
            (PREDICATE_EQUALS x 10)
            (THEN_EXECUTE
              (CALL_FUNCTION printf "x equals 10\n")
              (RETURN_VALUE 0)))
          (ELSE_EXECUTE
            (CALL_FUNCTION printf "x is less than 10\n")
            (RETURN_VALUE -1)))))
    
    (DEFINE_FUNCTION
      (NAME test_while_loop)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME i) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE i)
          (SOURCE_EXPRESSION 0))
        
        (LOOP_WHILE_CONDITION
          (CONDITION (PREDICATE_LESS_THAN i 5))
          (DO
            (CALL_FUNCTION printf "While loop iteration: %d\n" i)
            (ASSIGN
              (TARGET_VARIABLE i)
              (SOURCE_EXPRESSION (EXPRESSION_ADD i 1)))))
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_fixed_loop)
      (RETURNS INTEGER)
      (BODY
        (LOOP_FIXED_ITERATIONS
          (COUNTER i)
          (FROM 0)
          (TO 10)
          (STEP 2)
          (DO
            (CALL_FUNCTION printf "Fixed loop: %d\n" i)))
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        (CALL_FUNCTION test_if_else 15)
        (CALL_FUNCTION test_if_else 10)
        (CALL_FUNCTION test_if_else 5)
        (CALL_FUNCTION test_while_loop)
        (CALL_FUNCTION test_fixed_loop)
        (RETURN_VALUE 0)))
  )
)