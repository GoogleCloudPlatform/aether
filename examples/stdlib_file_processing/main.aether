; File Processing with Standard Library
; Demonstrates file I/O, string manipulation, and error handling

(DEFINE_MODULE
  (NAME "file_processor")
  (INTENT "Process text files with word counting and statistics")
  
  (IMPORT_MODULE "std.io")
  (IMPORT_MODULE "std.collections")
  (IMPORT_MODULE "std.math")
  
  (CONTENT
    (DEFINE_FUNCTION
      (NAME "count_words")
      (INTENT "Count words in a string")
      (ACCEPTS_PARAMETER (NAME "text") (TYPE STRING))
      (RETURNS (TYPE INT))
      
      (PRECONDITION
        (PREDICATE_NOT_EQUALS (VARIABLE_REFERENCE "text") (NULL_LITERAL))
        (PROOF_HINT "Text must not be null"))
      
      (BODY
        (DECLARE_VARIABLE (NAME "word_count") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        (DECLARE_VARIABLE (NAME "in_word") (TYPE BOOL) (INITIAL_VALUE (BOOL_LITERAL FALSE)))
        (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        (DECLARE_VARIABLE (NAME "len") (TYPE INT) 
          (INITIAL_VALUE (CALL_FUNCTION "string_length" 
            (ARGUMENTS (VARIABLE_REFERENCE "text")))))
        
        (WHILE_LOOP
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "len")))
          (BODY
            (DECLARE_VARIABLE (NAME "ch") (TYPE CHAR)
              (INITIAL_VALUE (CALL_FUNCTION "string_char_at"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "text")
                  (VARIABLE_REFERENCE "i")))))
            
            ; Check if character is whitespace
            (DECLARE_VARIABLE (NAME "is_space") (TYPE BOOL)
              (INITIAL_VALUE (LOGICAL_OR
                (PREDICATE_EQUALS (VARIABLE_REFERENCE "ch") (CHAR_LITERAL ' '))
                (LOGICAL_OR
                  (PREDICATE_EQUALS (VARIABLE_REFERENCE "ch") (CHAR_LITERAL '\t'))
                  (LOGICAL_OR
                    (PREDICATE_EQUALS (VARIABLE_REFERENCE "ch") (CHAR_LITERAL '\n'))
                    (PREDICATE_EQUALS (VARIABLE_REFERENCE "ch") (CHAR_LITERAL '\r')))))))
            
            (IF_CONDITION (LOGICAL_AND 
                (LOGICAL_NOT (VARIABLE_REFERENCE "is_space"))
                (LOGICAL_NOT (VARIABLE_REFERENCE "in_word")))
              (THEN_EXECUTE
                ; Starting a new word
                (ASSIGN (TARGET "word_count")
                  (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "word_count") (INTEGER_LITERAL 1))))
                (ASSIGN (TARGET "in_word") (SOURCE (BOOL_LITERAL TRUE))))
              (ELSE_EXECUTE
                (IF_CONDITION (VARIABLE_REFERENCE "is_space")
                  (THEN_EXECUTE
                    (ASSIGN (TARGET "in_word") (SOURCE (BOOL_LITERAL FALSE)))))))
            
            (ASSIGN (TARGET "i")
              (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1))))))
        
        (RETURN_VALUE (VARIABLE_REFERENCE "word_count"))))
    
    (DEFINE_FUNCTION
      (NAME "process_file")
      (INTENT "Process a text file and generate statistics")
      (ACCEPTS_PARAMETER (NAME "input_path") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "output_path") (TYPE STRING))
      (RETURNS (TYPE BOOL))
      
      (PRECONDITION
        (LOGICAL_AND
          (PREDICATE_NOT_EQUALS (VARIABLE_REFERENCE "input_path") (NULL_LITERAL))
          (PREDICATE_NOT_EQUALS (VARIABLE_REFERENCE "output_path") (NULL_LITERAL)))
        (PROOF_HINT "Paths must be valid"))
      
      (BODY
        (TRY_EXECUTE
          (PROTECTED_BLOCK
            ; Read input file
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT 
                (STRING_LITERAL "Processing file: ")
                (VARIABLE_REFERENCE "input_path"))))
            
            (DECLARE_VARIABLE (NAME "content") (TYPE STRING)
              (INITIAL_VALUE (CALL_FUNCTION "std.io.read_file_safe"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "input_path")
                  (INTEGER_LITERAL 1048576))))) ; 1MB limit
            
            ; Calculate statistics
            (DECLARE_VARIABLE (NAME "word_count") (TYPE INT)
              (INITIAL_VALUE (CALL_FUNCTION "count_words"
                (ARGUMENTS (VARIABLE_REFERENCE "content")))))
            
            (DECLARE_VARIABLE (NAME "char_count") (TYPE INT)
              (INITIAL_VALUE (CALL_FUNCTION "string_length"
                (ARGUMENTS (VARIABLE_REFERENCE "content")))))
            
            ; Count lines
            (DECLARE_VARIABLE (NAME "line_count") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 1)))
            (FOR_LOOP
              (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
              (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "char_count")))
              (UPDATE (ASSIGN (TARGET "i") 
                (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
              (BODY
                (IF_CONDITION (PREDICATE_EQUALS 
                    (CALL_FUNCTION "string_char_at"
                      (ARGUMENTS (VARIABLE_REFERENCE "content") (VARIABLE_REFERENCE "i")))
                    (CHAR_LITERAL '\n'))
                  (THEN_EXECUTE
                    (ASSIGN (TARGET "line_count")
                      (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "line_count") (INTEGER_LITERAL 1))))))))
            
            ; Calculate average words per line
            (DECLARE_VARIABLE (NAME "avg_words_per_line") (TYPE FLOAT)
              (INITIAL_VALUE (EXPRESSION_DIVIDE
                (TO_FLOAT (VARIABLE_REFERENCE "word_count"))
                (TO_FLOAT (VARIABLE_REFERENCE "line_count")))))
            
            ; Generate report
            (DECLARE_VARIABLE (NAME "report") (TYPE STRING)
              (INITIAL_VALUE (STRING_CONCAT
                (STRING_LITERAL "File Statistics Report\n")
                (STRING_CONCAT
                  (STRING_LITERAL "=====================\n\n")
                  (STRING_CONCAT
                    (STRING_LITERAL "Input file: ")
                    (STRING_CONCAT
                      (VARIABLE_REFERENCE "input_path")
                      (STRING_CONCAT
                        (STRING_LITERAL "\n\nStatistics:\n")
                        (STRING_CONCAT
                          (STRING_LITERAL "- Total characters: ")
                          (STRING_CONCAT
                            (TO_STRING (VARIABLE_REFERENCE "char_count"))
                            (STRING_CONCAT
                              (STRING_LITERAL "\n- Total words: ")
                              (STRING_CONCAT
                                (TO_STRING (VARIABLE_REFERENCE "word_count"))
                                (STRING_CONCAT
                                  (STRING_LITERAL "\n- Total lines: ")
                                  (STRING_CONCAT
                                    (TO_STRING (VARIABLE_REFERENCE "line_count"))
                                    (STRING_CONCAT
                                      (STRING_LITERAL "\n- Average words per line: ")
                                      (STRING_CONCAT
                                        (TO_STRING (VARIABLE_REFERENCE "avg_words_per_line"))
                                        (STRING_LITERAL "\n")))))))))))))))
            
            ; Write report to output file
            (DECLARE_VARIABLE (NAME "write_success") (TYPE BOOL)
              (INITIAL_VALUE (CALL_FUNCTION "std.io.write_file_safe"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "output_path")
                  (VARIABLE_REFERENCE "report")
                  (BOOL_LITERAL FALSE)))))
            
            (IF_CONDITION (VARIABLE_REFERENCE "write_success")
              (THEN_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_CONCAT
                    (STRING_LITERAL "Report written to: ")
                    (VARIABLE_REFERENCE "output_path"))))
                (RETURN_VALUE (BOOL_LITERAL TRUE)))
              (ELSE_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_LITERAL "Failed to write report")))
                (RETURN_VALUE (BOOL_LITERAL FALSE)))))
          
          (CATCH_EXCEPTION
            (EXCEPTION_TYPE "io_error")
            (BINDING_VARIABLE (NAME "e") (TYPE "io_error"))
            (HANDLER_BLOCK
              (CALL_FUNCTION "std.io.println"
                (ARGUMENTS (STRING_CONCAT
                  (STRING_LITERAL "Error: ")
                  (FIELD_ACCESS (VARIABLE_REFERENCE "e") "message"))))
              (RETURN_VALUE (BOOL_LITERAL FALSE)))))))
    
    (DEFINE_FUNCTION
      (NAME "main")
      (RETURNS (TYPE INT))
      (BODY
        ; Process a sample file
        (DECLARE_VARIABLE (NAME "success") (TYPE BOOL)
          (INITIAL_VALUE (CALL_FUNCTION "process_file"
            (ARGUMENTS 
              (STRING_LITERAL "input.txt")
              (STRING_LITERAL "statistics.txt")))))
        
        (IF_CONDITION (VARIABLE_REFERENCE "success")
          (THEN_EXECUTE
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "\nFile processing completed successfully!")))
            (RETURN_VALUE (INTEGER_LITERAL 0)))
          (ELSE_EXECUTE
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "\nFile processing failed.")))
            (RETURN_VALUE (INTEGER_LITERAL 1))))))
  )
)