; Network Client with Standard Library
; Demonstrates TCP client, HTTP requests, and network error handling

(DEFINE_MODULE
  (NAME "network_client")
  (INTENT "Network client operations using standard library")
  
  (IMPORT_MODULE "std.io")
  (IMPORT_MODULE "std.net")
  (IMPORT_MODULE "std.time")
  (IMPORT_MODULE "std.math")
  
  (CONTENT
    (DEFINE_FUNCTION
      (NAME "test_tcp_echo_client")
      (INTENT "Connect to echo server and test communication")
      (ACCEPTS_PARAMETER (NAME "host") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INT))
      (RETURNS (TYPE BOOL))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "=== TCP Echo Client Test ===\n")))
        
        (TRY_EXECUTE
          (PROTECTED_BLOCK
            ; Connect to server
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "Connecting to ")
                (STRING_CONCAT
                  (VARIABLE_REFERENCE "host")
                  (STRING_CONCAT
                    (STRING_LITERAL ":")
                    (TO_STRING (VARIABLE_REFERENCE "port")))))))
            
            (DECLARE_VARIABLE (NAME "socket") (TYPE "socket")
              (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_connect"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "host")
                  (VARIABLE_REFERENCE "port")
                  (INTEGER_LITERAL 5000))))) ; 5 second timeout
            
            (IF_CONDITION (LOGICAL_NOT (FIELD_ACCESS (VARIABLE_REFERENCE "socket") "is_connected"))
              (THEN_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_LITERAL "Failed to connect")))
                (RETURN_VALUE (BOOL_LITERAL FALSE))))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "Connected successfully!")))
            
            ; Send test messages
            (DECLARE_VARIABLE (NAME "messages") (TYPE (ARRAY STRING 3))
              (INITIAL_VALUE (ARRAY_LITERAL
                (TYPE (ARRAY STRING 3))
                (STRING_LITERAL "Hello, server!")
                (STRING_LITERAL "This is AetherScript")
                (STRING_LITERAL "Testing network operations"))))
            
            (FOR_LOOP
              (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
              (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 3)))
              (UPDATE (ASSIGN (TARGET "i") 
                (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
              (BODY
                (DECLARE_VARIABLE (NAME "msg") (TYPE STRING)
                  (INITIAL_VALUE (ARRAY_ACCESS (VARIABLE_REFERENCE "messages") (VARIABLE_REFERENCE "i"))))
                
                ; Send message
                (CALL_FUNCTION "std.io.print"
                  (ARGUMENTS (STRING_CONCAT
                    (STRING_LITERAL "Sending: ")
                    (VARIABLE_REFERENCE "msg"))))
                
                (DECLARE_VARIABLE (NAME "bytes_sent") (TYPE INT)
                  (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_send"
                    (ARGUMENTS 
                      (VARIABLE_REFERENCE "socket")
                      (STRING_CONCAT 
                        (VARIABLE_REFERENCE "msg")
                        (STRING_LITERAL "\n"))))))
                
                (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "bytes_sent") (INTEGER_LITERAL 0))
                  (THEN_EXECUTE
                    (CALL_FUNCTION "std.io.println"
                      (ARGUMENTS (STRING_LITERAL " - Failed to send")))
                    (CALL_FUNCTION "std.net.tcp_close"
                      (ARGUMENTS (VARIABLE_REFERENCE "socket")))
                    (RETURN_VALUE (BOOL_LITERAL FALSE))))
                
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_CONCAT
                    (STRING_LITERAL " - Sent ")
                    (STRING_CONCAT
                      (TO_STRING (VARIABLE_REFERENCE "bytes_sent"))
                      (STRING_LITERAL " bytes")))))
                
                ; Receive echo
                (DECLARE_VARIABLE (NAME "response") (TYPE STRING)
                  (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_receive"
                    (ARGUMENTS 
                      (VARIABLE_REFERENCE "socket")
                      (INTEGER_LITERAL 1024)
                      (INTEGER_LITERAL 2000))))) ; 2 second timeout
                
                (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "response") (STRING_LITERAL ""))
                  (THEN_EXECUTE
                    (CALL_FUNCTION "std.io.println"
                      (ARGUMENTS (STRING_LITERAL "No response received"))))
                  (ELSE_EXECUTE
                    (CALL_FUNCTION "std.io.println"
                      (ARGUMENTS (STRING_CONCAT
                        (STRING_LITERAL "Received: ")
                        (CALL_FUNCTION "string_trim"
                          (ARGUMENTS (VARIABLE_REFERENCE "response"))))))))))
            
            ; Close connection
            (CALL_FUNCTION "std.net.tcp_close"
              (ARGUMENTS (VARIABLE_REFERENCE "socket")))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "\nConnection closed")))
            (RETURN_VALUE (BOOL_LITERAL TRUE)))
          
          (CATCH_EXCEPTION
            (EXCEPTION_TYPE "network_error")
            (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
            (HANDLER_BLOCK
              (CALL_FUNCTION "std.io.println"
                (ARGUMENTS (STRING_CONCAT
                  (STRING_LITERAL "Network error: ")
                  (FIELD_ACCESS (VARIABLE_REFERENCE "e") "message"))))
              (RETURN_VALUE (BOOL_LITERAL FALSE)))))))
    
    (DEFINE_FUNCTION
      (NAME "test_http_requests")
      (INTENT "Test HTTP GET and POST requests")
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== HTTP Client Test ===\n")))
        
        ; Test GET request
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "Testing HTTP GET request...")))
        
        (DECLARE_VARIABLE (NAME "get_options") (TYPE (MAP STRING STRING))
          (INITIAL_VALUE (MAP_LITERAL 
            (KEY_TYPE STRING) 
            (VALUE_TYPE STRING)
            (ENTRY (KEY "timeout_ms") (VALUE "10000"))
            (ENTRY (KEY "max_response_size") (VALUE "65536")))))
        
        (TRY_EXECUTE
          (PROTECTED_BLOCK
            (DECLARE_VARIABLE (NAME "response") (TYPE "http_response")
              (INITIAL_VALUE (CALL_FUNCTION "std.net.http_get"
                (ARGUMENTS 
                  (STRING_LITERAL "http://example.com/api/data")
                  (VARIABLE_REFERENCE "get_options")))))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "Status code: ")
                (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "response") "status_code")))))
            
            (IF_CONDITION (PREDICATE_EQUALS 
                (FIELD_ACCESS (VARIABLE_REFERENCE "response") "status_code")
                (INTEGER_LITERAL 200))
              (THEN_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_LITERAL "Request successful!")))
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_CONCAT
                    (STRING_LITERAL "Response length: ")
                    (TO_STRING (CALL_FUNCTION "string_length"
                      (ARGUMENTS (FIELD_ACCESS (VARIABLE_REFERENCE "response") "body"))))))))
              (ELSE_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_LITERAL "Request failed"))))))
          
          (CATCH_EXCEPTION
            (EXCEPTION_TYPE "network_error")
            (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
            (HANDLER_BLOCK
              (CALL_FUNCTION "std.io.println"
                (ARGUMENTS (STRING_CONCAT
                  (STRING_LITERAL "HTTP GET error: ")
                  (FIELD_ACCESS (VARIABLE_REFERENCE "e") "message")))))))
        
        ; Test POST request
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\nTesting HTTP POST request...")))
        
        (DECLARE_VARIABLE (NAME "post_data") (TYPE STRING)
          (INITIAL_VALUE (STRING_LITERAL "{\"name\": \"AetherScript\", \"version\": \"1.0\"}")))
        
        (DECLARE_VARIABLE (NAME "post_options") (TYPE (MAP STRING STRING))
          (INITIAL_VALUE (MAP_LITERAL 
            (KEY_TYPE STRING) 
            (VALUE_TYPE STRING)
            (ENTRY (KEY "timeout_ms") (VALUE "15000"))
            (ENTRY (KEY "max_response_size") (VALUE "32768")))))
        
        (TRY_EXECUTE
          (PROTECTED_BLOCK
            (DECLARE_VARIABLE (NAME "post_response") (TYPE "http_response")
              (INITIAL_VALUE (CALL_FUNCTION "std.net.http_post"
                (ARGUMENTS 
                  (STRING_LITERAL "http://example.com/api/submit")
                  (VARIABLE_REFERENCE "post_data")
                  (STRING_LITERAL "application/json")
                  (VARIABLE_REFERENCE "post_options")))))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "POST Status code: ")
                (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "post_response") "status_code")))))
            
            (IF_CONDITION (LOGICAL_OR
                (PREDICATE_EQUALS 
                  (FIELD_ACCESS (VARIABLE_REFERENCE "post_response") "status_code")
                  (INTEGER_LITERAL 200))
                (PREDICATE_EQUALS 
                  (FIELD_ACCESS (VARIABLE_REFERENCE "post_response") "status_code")
                  (INTEGER_LITERAL 201)))
              (THEN_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_LITERAL "POST request successful!")))))
          
          (CATCH_EXCEPTION
            (EXCEPTION_TYPE "network_error")
            (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
            (HANDLER_BLOCK
              (CALL_FUNCTION "std.io.println"
                (ARGUMENTS (STRING_CONCAT
                  (STRING_LITERAL "HTTP POST error: ")
                  (FIELD_ACCESS (VARIABLE_REFERENCE "e") "message")))))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "test_dns_resolution")
      (INTENT "Test hostname resolution")
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== DNS Resolution Test ===\n")))
        
        (DECLARE_VARIABLE (NAME "hostnames") (TYPE (ARRAY STRING 4))
          (INITIAL_VALUE (ARRAY_LITERAL
            (TYPE (ARRAY STRING 4))
            (STRING_LITERAL "localhost")
            (STRING_LITERAL "google.com")
            (STRING_LITERAL "github.com")
            (STRING_LITERAL "invalid-host-name-12345.test"))))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 4)))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (DECLARE_VARIABLE (NAME "hostname") (TYPE STRING)
              (INITIAL_VALUE (ARRAY_ACCESS (VARIABLE_REFERENCE "hostnames") (VARIABLE_REFERENCE "i"))))
            
            (CALL_FUNCTION "std.io.print"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "Resolving ")
                (STRING_CONCAT
                  (VARIABLE_REFERENCE "hostname")
                  (STRING_LITERAL "... ")))))
            
            (TRY_EXECUTE
              (PROTECTED_BLOCK
                (DECLARE_VARIABLE (NAME "addr") (TYPE "ip_address")
                  (INITIAL_VALUE (CALL_FUNCTION "std.net.resolve_hostname"
                    (ARGUMENTS (VARIABLE_REFERENCE "hostname")))))
                
                (CALL_FUNCTION "std.io.print"
                  (ARGUMENTS (STRING_LITERAL "IP: ")))
                
                ; Print IP address octets
                (FOR_LOOP
                  (INIT (DECLARE_VARIABLE (NAME "j") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
                  (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 4)))
                  (UPDATE (ASSIGN (TARGET "j") 
                    (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 1)))))
                  (BODY
                    (IF_CONDITION (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 0))
                      (THEN_EXECUTE
                        (CALL_FUNCTION "std.io.print"
                          (ARGUMENTS (STRING_LITERAL ".")))))
                    (CALL_FUNCTION "std.io.print"
                      (ARGUMENTS (TO_STRING 
                        (ARRAY_ACCESS 
                          (FIELD_ACCESS (VARIABLE_REFERENCE "addr") "octets")
                          (VARIABLE_REFERENCE "j")))))))
                
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_CONCAT
                    (STRING_LITERAL ":")
                    (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "addr") "port"))))))
              
              (CATCH_EXCEPTION
                (EXCEPTION_TYPE "network_error")
                (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
                (HANDLER_BLOCK
                  (CALL_FUNCTION "std.io.println"
                    (ARGUMENTS (STRING_LITERAL "Failed to resolve"))))))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "measure_network_latency")
      (INTENT "Measure network round-trip time")
      (ACCEPTS_PARAMETER (NAME "host") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INT))
      (ACCEPTS_PARAMETER (NAME "num_pings") (TYPE INT))
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "\n=== Network Latency Test (")
            (STRING_CONCAT
              (VARIABLE_REFERENCE "host")
              (STRING_CONCAT
                (STRING_LITERAL ":")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "port"))
                  (STRING_LITERAL ") ===\n")))))))
        
        (DECLARE_VARIABLE (NAME "total_time") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        (DECLARE_VARIABLE (NAME "min_time") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 999999)))
        (DECLARE_VARIABLE (NAME "max_time") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        (DECLARE_VARIABLE (NAME "successful_pings") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "num_pings")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (DECLARE_VARIABLE (NAME "start_time") (TYPE "timestamp")
              (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
            
            (TRY_EXECUTE
              (PROTECTED_BLOCK
                ; Connect
                (DECLARE_VARIABLE (NAME "socket") (TYPE "socket")
                  (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_connect"
                    (ARGUMENTS 
                      (VARIABLE_REFERENCE "host")
                      (VARIABLE_REFERENCE "port")
                      (INTEGER_LITERAL 2000)))))
                
                (IF_CONDITION (FIELD_ACCESS (VARIABLE_REFERENCE "socket") "is_connected")
                  (THEN_EXECUTE
                    ; Send ping
                    (CALL_FUNCTION "std.net.tcp_send"
                      (ARGUMENTS 
                        (VARIABLE_REFERENCE "socket")
                        (STRING_LITERAL "PING\n")))
                    
                    ; Wait for response
                    (DECLARE_VARIABLE (NAME "response") (TYPE STRING)
                      (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_receive"
                        (ARGUMENTS 
                          (VARIABLE_REFERENCE "socket")
                          (INTEGER_LITERAL 100)
                          (INTEGER_LITERAL 1000)))))
                    
                    ; Close connection
                    (CALL_FUNCTION "std.net.tcp_close"
                      (ARGUMENTS (VARIABLE_REFERENCE "socket")))
                    
                    ; Calculate round-trip time
                    (DECLARE_VARIABLE (NAME "end_time") (TYPE "timestamp")
                      (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
                    
                    (DECLARE_VARIABLE (NAME "rtt_ms") (TYPE INT)
                      (INITIAL_VALUE (EXPRESSION_MULTIPLY
                        (EXPRESSION_SUBTRACT
                          (FIELD_ACCESS (VARIABLE_REFERENCE "end_time") "seconds")
                          (FIELD_ACCESS (VARIABLE_REFERENCE "start_time") "seconds"))
                        (INTEGER_LITERAL 1000))))
                    
                    ; Update statistics
                    (ASSIGN (TARGET "total_time")
                      (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "total_time") (VARIABLE_REFERENCE "rtt_ms"))))
                    (ASSIGN (TARGET "min_time")
                      (SOURCE (CALL_FUNCTION "std.math.min"
                        (ARGUMENTS (VARIABLE_REFERENCE "min_time") (VARIABLE_REFERENCE "rtt_ms")))))
                    (ASSIGN (TARGET "max_time")
                      (SOURCE (CALL_FUNCTION "std.math.max"
                        (ARGUMENTS (VARIABLE_REFERENCE "max_time") (VARIABLE_REFERENCE "rtt_ms")))))
                    (ASSIGN (TARGET "successful_pings")
                      (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "successful_pings") (INTEGER_LITERAL 1))))
                    
                    (CALL_FUNCTION "std.io.println"
                      (ARGUMENTS (STRING_CONCAT
                        (STRING_LITERAL "Ping ")
                        (STRING_CONCAT
                          (TO_STRING (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))
                          (STRING_CONCAT
                            (STRING_LITERAL ": ")
                            (STRING_CONCAT
                              (TO_STRING (VARIABLE_REFERENCE "rtt_ms"))
                              (STRING_LITERAL " ms")))))))))
              
              (CATCH_EXCEPTION
                (EXCEPTION_TYPE "network_error")
                (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
                (HANDLER_BLOCK
                  (CALL_FUNCTION "std.io.println"
                    (ARGUMENTS (STRING_CONCAT
                      (STRING_LITERAL "Ping ")
                      (STRING_CONCAT
                        (TO_STRING (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))
                        (STRING_LITERAL ": Failed"))))))))))
        
        ; Display statistics
        (IF_CONDITION (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "successful_pings") (INTEGER_LITERAL 0))
          (THEN_EXECUTE
            (DECLARE_VARIABLE (NAME "avg_time") (TYPE INT)
              (INITIAL_VALUE (EXPRESSION_DIVIDE 
                (VARIABLE_REFERENCE "total_time")
                (VARIABLE_REFERENCE "successful_pings"))))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "\nLatency Statistics:")))
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "  Successful: ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "successful_pings"))
                  (STRING_CONCAT
                    (STRING_LITERAL "/")
                    (TO_STRING (VARIABLE_REFERENCE "num_pings")))))))
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "  Min: ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "min_time"))
                  (STRING_LITERAL " ms")))))
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "  Max: ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "max_time"))
                  (STRING_LITERAL " ms")))))
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "  Average: ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "avg_time"))
                  (STRING_LITERAL " ms"))))))
          (ELSE_EXECUTE
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "\nAll pings failed")))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "main")
      (RETURNS (TYPE INT))
      (BODY
        ; Test TCP echo client (requires echo server running)
        (IF_CONDITION (BOOL_LITERAL FALSE) ; Set to TRUE if echo server is available
          (THEN_EXECUTE
            (CALL_FUNCTION "test_tcp_echo_client"
              (ARGUMENTS 
                (STRING_LITERAL "localhost")
                (INTEGER_LITERAL 7000)))))
        
        ; Test HTTP requests
        (CALL_FUNCTION "test_http_requests" (ARGUMENTS))
        
        ; Test DNS resolution
        (CALL_FUNCTION "test_dns_resolution" (ARGUMENTS))
        
        ; Test network latency
        (CALL_FUNCTION "measure_network_latency"
          (ARGUMENTS 
            (STRING_LITERAL "google.com")
            (INTEGER_LITERAL 80)
            (INTEGER_LITERAL 5)))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== Network client tests complete! ===")))
        
        (RETURN_VALUE (INTEGER_LITERAL 0))))
  )
)