; Concurrent Task Processing with Standard Library
; Demonstrates threads, channels, and synchronization

(DEFINE_MODULE
  (NAME "concurrent_tasks")
  (INTENT "Process tasks concurrently using channels and threads")
  
  (IMPORT_MODULE "std.io")
  (IMPORT_MODULE "std.concurrency")
  (IMPORT_MODULE "std.math")
  (IMPORT_MODULE "std.time")
  
  (CONTENT
    ; Task types
    (DECLARE_CONSTANT (NAME "TASK_CALCULATE") (TYPE INT) (VALUE (INTEGER_LITERAL 1)))
    (DECLARE_CONSTANT (NAME "TASK_TRANSFORM") (TYPE INT) (VALUE (INTEGER_LITERAL 2)))
    (DECLARE_CONSTANT (NAME "TASK_VALIDATE") (TYPE INT) (VALUE (INTEGER_LITERAL 3)))
    (DECLARE_CONSTANT (NAME "TASK_DONE") (TYPE INT) (VALUE (INTEGER_LITERAL -1)))
    
    (DEFINE_FUNCTION
      (NAME "worker_thread")
      (INTENT "Worker thread that processes tasks from a channel")
      (ACCEPTS_PARAMETER (NAME "worker_id") (TYPE INT))
      (ACCEPTS_PARAMETER (NAME "task_channel") (TYPE "channel"))
      (ACCEPTS_PARAMETER (NAME "result_channel") (TYPE "channel"))
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Worker ")
            (STRING_CONCAT
              (TO_STRING (VARIABLE_REFERENCE "worker_id"))
              (STRING_LITERAL " started")))))
        
        (WHILE_LOOP
          (CONDITION (BOOL_LITERAL TRUE))
          (BODY
            ; Receive task from channel
            (DECLARE_VARIABLE (NAME "task_type") (TYPE INT))
            (DECLARE_VARIABLE (NAME "received") (TYPE BOOL)
              (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.channel_receive"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "task_channel")
                  (INTEGER_LITERAL 1000) ; 1 second timeout
                  (ADDRESS_OF (VARIABLE_REFERENCE "task_type"))))))
            
            (IF_CONDITION (LOGICAL_NOT (VARIABLE_REFERENCE "received"))
              (THEN_EXECUTE
                (CONTINUE_LOOP)))
            
            ; Check for termination signal
            (IF_CONDITION (PREDICATE_EQUALS 
                (VARIABLE_REFERENCE "task_type")
                (VARIABLE_REFERENCE "TASK_DONE"))
              (THEN_EXECUTE
                (CALL_FUNCTION "std.io.println"
                  (ARGUMENTS (STRING_CONCAT
                    (STRING_LITERAL "Worker ")
                    (STRING_CONCAT
                      (TO_STRING (VARIABLE_REFERENCE "worker_id"))
                      (STRING_LITERAL " shutting down")))))
                (BREAK_LOOP)))
            
            ; Process task based on type
            (DECLARE_VARIABLE (NAME "result") (TYPE INT))
            
            (IF_CONDITION (PREDICATE_EQUALS 
                (VARIABLE_REFERENCE "task_type")
                (VARIABLE_REFERENCE "TASK_CALCULATE"))
              (THEN_EXECUTE
                ; Simulate calculation
                (DECLARE_VARIABLE (NAME "value") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
                (FOR_LOOP
                  (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
                  (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1000)))
                  (UPDATE (ASSIGN (TARGET "i") 
                    (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
                  (BODY
                    (ASSIGN (TARGET "value")
                      (SOURCE (EXPRESSION_ADD 
                        (VARIABLE_REFERENCE "value")
                        (EXPRESSION_MULTIPLY (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "i")))))))
                (ASSIGN (TARGET "result") (SOURCE (VARIABLE_REFERENCE "value"))))
              (ELSE_EXECUTE
                (IF_CONDITION (PREDICATE_EQUALS 
                    (VARIABLE_REFERENCE "task_type")
                    (VARIABLE_REFERENCE "TASK_TRANSFORM"))
                  (THEN_EXECUTE
                    ; Simulate transformation
                    (ASSIGN (TARGET "result") 
                      (SOURCE (EXPRESSION_MULTIPLY 
                        (VARIABLE_REFERENCE "worker_id")
                        (INTEGER_LITERAL 100)))))
                  (ELSE_EXECUTE
                    ; TASK_VALIDATE
                    (ASSIGN (TARGET "result") (SOURCE (INTEGER_LITERAL 1)))))))
            
            ; Send result back
            (CALL_FUNCTION "std.concurrency.channel_send"
              (ARGUMENTS 
                (VARIABLE_REFERENCE "result_channel")
                (VARIABLE_REFERENCE "result")
                (INTEGER_LITERAL -1))) ; No timeout
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "Worker ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "worker_id"))
                  (STRING_CONCAT
                    (STRING_LITERAL " completed task type ")
                    (STRING_CONCAT
                      (TO_STRING (VARIABLE_REFERENCE "task_type"))
                      (STRING_CONCAT
                        (STRING_LITERAL " with result ")
                        (TO_STRING (VARIABLE_REFERENCE "result"))))))))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "producer_thread")
      (INTENT "Producer thread that generates tasks")
      (ACCEPTS_PARAMETER (NAME "task_channel") (TYPE "channel"))
      (ACCEPTS_PARAMETER (NAME "num_tasks") (TYPE INT))
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "Producer started")))
        
        ; Generate tasks
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "num_tasks")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            ; Cycle through task types
            (DECLARE_VARIABLE (NAME "task_type") (TYPE INT)
              (INITIAL_VALUE (EXPRESSION_ADD
                (EXPRESSION_MODULO (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 3))
                (INTEGER_LITERAL 1))))
            
            (CALL_FUNCTION "std.concurrency.channel_send"
              (ARGUMENTS 
                (VARIABLE_REFERENCE "task_channel")
                (VARIABLE_REFERENCE "task_type")
                (INTEGER_LITERAL -1)))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "Producer sent task type ")
                (TO_STRING (VARIABLE_REFERENCE "task_type")))))
            
            ; Small delay to simulate work
            (CALL_FUNCTION "std.concurrency.thread_yield" (ARGUMENTS))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "Producer finished generating tasks")))
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "run_concurrent_processing")
      (INTENT "Main concurrent processing coordinator")
      (ACCEPTS_PARAMETER (NAME "num_workers") (TYPE INT))
      (ACCEPTS_PARAMETER (NAME "num_tasks") (TYPE INT))
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "=== Concurrent Task Processing Demo ===")))
        
        ; Create channels
        (DECLARE_VARIABLE (NAME "task_channel") (TYPE "channel")
          (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.channel_create"
            (ARGUMENTS (INTEGER_LITERAL 10))))) ; Buffered channel
        
        (DECLARE_VARIABLE (NAME "result_channel") (TYPE "channel")
          (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.channel_create"
            (ARGUMENTS (INTEGER_LITERAL 10)))))
        
        ; Create worker threads
        (DECLARE_VARIABLE (NAME "workers") (TYPE (ARRAY "thread" 10)))
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "num_workers")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (ASSIGN (TARGET (ARRAY_ACCESS (VARIABLE_REFERENCE "workers") (VARIABLE_REFERENCE "i")))
              (SOURCE (CALL_FUNCTION "std.concurrency.thread_create"
                (ARGUMENTS 
                  (LAMBDA ()
                    (CALL_FUNCTION "worker_thread"
                      (ARGUMENTS 
                        (VARIABLE_REFERENCE "i")
                        (VARIABLE_REFERENCE "task_channel")
                        (VARIABLE_REFERENCE "result_channel"))))
                  (INTEGER_LITERAL 65536)))))))
        
        ; Create producer thread
        (DECLARE_VARIABLE (NAME "producer") (TYPE "thread")
          (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.thread_create"
            (ARGUMENTS 
              (LAMBDA ()
                (CALL_FUNCTION "producer_thread"
                  (ARGUMENTS 
                    (VARIABLE_REFERENCE "task_channel")
                    (VARIABLE_REFERENCE "num_tasks"))))
              (INTEGER_LITERAL 65536)))))
        
        ; Collect results
        (DECLARE_VARIABLE (NAME "total_result") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        (DECLARE_VARIABLE (NAME "results_received") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0)))
        
        (WHILE_LOOP
          (CONDITION (PREDICATE_LESS_THAN 
            (VARIABLE_REFERENCE "results_received")
            (VARIABLE_REFERENCE "num_tasks")))
          (BODY
            (DECLARE_VARIABLE (NAME "result") (TYPE INT))
            (IF_CONDITION (CALL_FUNCTION "std.concurrency.channel_receive"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "result_channel")
                  (INTEGER_LITERAL 5000) ; 5 second timeout
                  (ADDRESS_OF (VARIABLE_REFERENCE "result"))))
              (THEN_EXECUTE
                (ASSIGN (TARGET "total_result")
                  (SOURCE (EXPRESSION_ADD 
                    (VARIABLE_REFERENCE "total_result")
                    (VARIABLE_REFERENCE "result"))))
                (ASSIGN (TARGET "results_received")
                  (SOURCE (EXPRESSION_ADD 
                    (VARIABLE_REFERENCE "results_received")
                    (INTEGER_LITERAL 1))))))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "\nReceived ")
            (STRING_CONCAT
              (TO_STRING (VARIABLE_REFERENCE "results_received"))
              (STRING_CONCAT
                (STRING_LITERAL " results. Total: ")
                (TO_STRING (VARIABLE_REFERENCE "total_result")))))))
        
        ; Send termination signal to workers
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "num_workers")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (CALL_FUNCTION "std.concurrency.channel_send"
              (ARGUMENTS 
                (VARIABLE_REFERENCE "task_channel")
                (VARIABLE_REFERENCE "TASK_DONE")
                (INTEGER_LITERAL 1000)))))
        
        ; Wait for producer to finish
        (CALL_FUNCTION "std.concurrency.thread_join"
          (ARGUMENTS 
            (VARIABLE_REFERENCE "producer")
            (INTEGER_LITERAL -1)))
        
        ; Wait for workers to finish
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "num_workers")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (CALL_FUNCTION "std.concurrency.thread_join"
              (ARGUMENTS 
                (ARRAY_ACCESS (VARIABLE_REFERENCE "workers") (VARIABLE_REFERENCE "i"))
                (INTEGER_LITERAL 5000)))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\nAll threads finished")))
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "test_mutex_synchronization")
      (INTENT "Test mutex-based synchronization")
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== Mutex Synchronization Test ===")))
        
        ; Create shared counter and mutex
        (DECLARE_VARIABLE (NAME "counter") (TYPE "atomic_int")
          (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.atomic_create"
            (ARGUMENTS (INTEGER_LITERAL 0)))))
        
        (DECLARE_VARIABLE (NAME "mutex") (TYPE "mutex")
          (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.mutex_create" (ARGUMENTS))))
        
        ; Create threads that increment counter
        (DECLARE_CONSTANT (NAME "NUM_THREADS") (TYPE INT) (VALUE (INTEGER_LITERAL 5)))
        (DECLARE_CONSTANT (NAME "INCREMENTS_PER_THREAD") (TYPE INT) (VALUE (INTEGER_LITERAL 1000)))
        
        (DECLARE_VARIABLE (NAME "threads") (TYPE (ARRAY "thread" 5)))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "NUM_THREADS")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (ASSIGN (TARGET (ARRAY_ACCESS (VARIABLE_REFERENCE "threads") (VARIABLE_REFERENCE "i")))
              (SOURCE (CALL_FUNCTION "std.concurrency.thread_create"
                (ARGUMENTS 
                  (LAMBDA ()
                    (FOR_LOOP
                      (INIT (DECLARE_VARIABLE (NAME "j") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
                      (CONDITION (PREDICATE_LESS_THAN 
                        (VARIABLE_REFERENCE "j") 
                        (VARIABLE_REFERENCE "INCREMENTS_PER_THREAD")))
                      (UPDATE (ASSIGN (TARGET "j") 
                        (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 1)))))
                      (BODY
                        ; Lock mutex
                        (IF_CONDITION (CALL_FUNCTION "std.concurrency.mutex_lock"
                            (ARGUMENTS 
                              (VARIABLE_REFERENCE "mutex")
                              (INTEGER_LITERAL -1)))
                          (THEN_EXECUTE
                            ; Increment counter
                            (CALL_FUNCTION "std.concurrency.atomic_add"
                              (ARGUMENTS 
                                (VARIABLE_REFERENCE "counter")
                                (INTEGER_LITERAL 1)))
                            
                            ; Unlock mutex
                            (CALL_FUNCTION "std.concurrency.mutex_unlock"
                              (ARGUMENTS (VARIABLE_REFERENCE "mutex"))))))))
                  (INTEGER_LITERAL 32768)))))))
        
        ; Wait for all threads
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "NUM_THREADS")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (CALL_FUNCTION "std.concurrency.thread_join"
              (ARGUMENTS 
                (ARRAY_ACCESS (VARIABLE_REFERENCE "threads") (VARIABLE_REFERENCE "i"))
                (INTEGER_LITERAL -1)))))
        
        ; Check final counter value
        (DECLARE_VARIABLE (NAME "final_value") (TYPE INT)
          (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.atomic_load"
            (ARGUMENTS (VARIABLE_REFERENCE "counter")))))
        
        (DECLARE_VARIABLE (NAME "expected") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_MULTIPLY 
            (VARIABLE_REFERENCE "NUM_THREADS")
            (VARIABLE_REFERENCE "INCREMENTS_PER_THREAD"))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Final counter value: ")
            (STRING_CONCAT
              (TO_STRING (VARIABLE_REFERENCE "final_value"))
              (STRING_CONCAT
                (STRING_LITERAL " (expected: ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "expected"))
                  (STRING_LITERAL ")")))))))
        
        (IF_CONDITION (PREDICATE_EQUALS 
            (VARIABLE_REFERENCE "final_value")
            (VARIABLE_REFERENCE "expected"))
          (THEN_EXECUTE
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "Mutex synchronization test PASSED"))))
          (ELSE_EXECUTE
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "Mutex synchronization test FAILED")))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "main")
      (RETURNS (TYPE INT))
      (BODY
        ; Record start time
        (DECLARE_VARIABLE (NAME "start_time") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
        
        ; Run concurrent processing demo
        (CALL_FUNCTION "run_concurrent_processing"
          (ARGUMENTS 
            (INTEGER_LITERAL 3) ; 3 workers
            (INTEGER_LITERAL 12))) ; 12 tasks
        
        ; Test mutex synchronization
        (CALL_FUNCTION "test_mutex_synchronization" (ARGUMENTS))
        
        ; Calculate elapsed time
        (DECLARE_VARIABLE (NAME "end_time") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
        
        (DECLARE_VARIABLE (NAME "duration") (TYPE "duration")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.duration_from_seconds"
            (ARGUMENTS (EXPRESSION_SUBTRACT
              (FIELD_ACCESS (VARIABLE_REFERENCE "end_time") "seconds")
              (FIELD_ACCESS (VARIABLE_REFERENCE "start_time") "seconds"))))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "\nTotal execution time: ")
            (STRING_CONCAT
              (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "duration") "seconds"))
              (STRING_LITERAL " seconds")))))
        
        (RETURN_VALUE (INTEGER_LITERAL 0))))
  )
)