;; Demonstration of ownership annotations in AetherScript

(module ownership_demo
    ;; Function that takes ownership of a value
    (function consume_value (^integer value) void
        ;; value is owned by this function
        (print_int value))
    
    ;; Function that borrows a value (immutable reference)
    (function borrow_value (&integer value) integer
        ;; value is borrowed, we can read but not modify
        (+ value 1))
    
    ;; Function that mutably borrows a value
    (function modify_value (&mut integer value) void
        ;; value is mutably borrowed, we can modify it
        (set value (* value 2)))
    
    ;; Function that takes shared ownership
    (function share_value (~integer value) void
        ;; value is shared (reference counted)
        (print_int value))
    
    ;; Struct with owned and borrowed fields
    (struct Container
        (owned_data ^integer)
        (borrowed_data &integer)
        (shared_data ~integer))
    
    ;; Function demonstrating ownership transfer
    (function transfer_ownership () void
        (let ((x 42))
            ;; Transfer ownership to consume_value
            (consume_value x)
            ;; x is no longer accessible here
            ))
    
    ;; Function demonstrating borrowing
    (function test_borrowing () void
        (let ((y 10))
            ;; Borrow y immutably
            (let ((result (borrow_value &y)))
                (print_int result))
            ;; y is still accessible
            (print_int y)))
    
    ;; Function demonstrating mutable borrowing
    (function test_mut_borrowing () void
        (let ((z 5))
            ;; Mutably borrow z
            (modify_value &mut z)
            ;; z has been modified
            (print_int z))) ;; prints 10
    
    ;; Main function
    (function main () integer
        (print_string "=== Ownership Demo ===\n")
        (transfer_ownership)
        (test_borrowing)
        (test_mut_borrowing)
        0))