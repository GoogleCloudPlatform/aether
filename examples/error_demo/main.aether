;; Error Demonstration for LLM-Optimized Error System
;; This file intentionally contains errors to demonstrate fix suggestions

(DEFINE_MODULE
  (NAME error_demo)
  (INTENT "Demonstrate enhanced error reporting and auto-fix suggestions"))

;; Example 1: Undefined symbol error
(DEFINE_FUNCTION
  (NAME process_order)
  (INTENT "Process customer order")
  (ACCEPTS_PARAMETER (NAME "order_id") (TYPE INTEGER))
  (RETURNS (TYPE STRING))
  (BODY
    ;; Error: 'total_amount' is not defined
    (DECLARE_VARIABLE 
      (NAME "tax")
      (TYPE FLOAT)
      (INITIAL_VALUE (EXPRESSION_MULTIPLY total_amount 0.08)))
    
    (RETURN_VALUE (STRING_LITERAL "Order processed"))))

;; Example 2: Type mismatch error
(DEFINE_FUNCTION
  (NAME calculate_discount)
  (INTENT "Calculate percentage discount")
  (ACCEPTS_PARAMETER (NAME "price") (TYPE FLOAT))
  (ACCEPTS_PARAMETER (NAME "discount_percent") (TYPE INTEGER))
  (RETURNS (TYPE FLOAT))
  (BODY
    ;; Error: STRING + FLOAT type mismatch
    (DECLARE_VARIABLE
      (NAME "discount_amount")
      (TYPE FLOAT)
      (INITIAL_VALUE (EXPRESSION_MULTIPLY 
        (STRING_LITERAL "10.5")  ;; Should be numeric
        discount_percent)))
    
    (RETURN_VALUE discount_amount)))

;; Example 3: Intent mismatch error
(DEFINE_FUNCTION
  (NAME safe_divide)
  (INTENT "Performs safe division with zero check")
  (ACCEPTS_PARAMETER (NAME "numerator") (TYPE FLOAT))
  (ACCEPTS_PARAMETER (NAME "denominator") (TYPE FLOAT))
  (RETURNS (TYPE FLOAT))
  (BEHAVIORAL_SPEC
    (PURE TRUE)  ;; Claims to be pure
    (IDEMPOTENT TRUE))
  (BODY
    ;; Intent mismatch: No zero check despite stated intent
    ;; Also not pure due to printf
    (FUNCTION_CALL
      (NAME "printf")
      (ARGUMENT (STRING_LITERAL "Dividing %f by %f\n"))
      (ARGUMENT numerator)
      (ARGUMENT denominator))
    
    ;; Missing precondition check
    (RETURN_VALUE (EXPRESSION_DIVIDE numerator denominator))))

;; Example 4: Missing initialization
(DEFINE_FUNCTION
  (NAME accumulate_values)
  (INTENT "Sum array elements")
  (ACCEPTS_PARAMETER (NAME "values") (TYPE (ARRAY_OF_TYPE INTEGER)))
  (RETURNS (TYPE INTEGER))
  (BODY
    (DECLARE_VARIABLE
      (NAME "sum")
      (TYPE INTEGER)
      ;; Error: No initial value
      (MUTABLE TRUE))
    
    (LOOP_FOR_EACH_ELEMENT
      (COLLECTION values)
      (ELEMENT_BINDING "value")
      (ELEMENT_TYPE INTEGER)
      (BODY
        ;; Error: Using uninitialized 'sum'
        (ASSIGN sum (EXPRESSION_ADD sum value))))
    
    (RETURN_VALUE sum)))

;; Example 5: Contract violation
(DEFINE_FUNCTION
  (NAME validate_email)
  (INTENT "Check if email is valid")
  (ACCEPTS_PARAMETER (NAME "email") (TYPE STRING))
  (RETURNS (TYPE BOOLEAN))
  (PRECONDITION
    (PREDICATE_NOT_EQUALS email "")
    (FAILURE_ACTION THROW_EXCEPTION)
    (PROOF_HINT "Email must not be empty"))
  (POSTCONDITION
    ;; Error: Postcondition can't be verified statically
    (PREDICATE_EQUALS RETURNED_VALUE (EXPRESSION_CONTAINS email "@"))
    (PROOF_HINT "Result indicates if @ symbol present"))
  (BODY
    ;; Simplified validation - just check for @
    (RETURN_VALUE (EXPRESSION_CONTAINS email "@"))))

;; Expected structured errors:
;; 
;; 1. SEM-001: Undefined symbol 'total_amount'
;;    Fixes: - Declare variable before use
;;           - Add as function parameter
;;           - Did you mean 'order_id'?
;;
;; 2. TYPE-001: Type mismatch in calculate_discount
;;    Fixes: - Convert string to float: (CAST_TO_TYPE "10.5" FLOAT)
;;           - Use numeric literal: 10.5
;;           - Parse string: (CALL_FUNCTION "parse_float" ...)
;;
;; 3. INTENT-001: Function behavior doesn't match intent
;;    Evidence: - No zero check for denominator
;;              - Has side effect (printf) but marked as pure
;;    Fixes: - Add precondition check
;;           - Remove printf or mark as impure
;;
;; 4. SEM-002: Use of uninitialized variable 'sum'
;;    Fixes: - Initialize at declaration: (INITIAL_VALUE 0)
;;           - Add initialization before loop
;;
;; 5. VERIFY-001: Postcondition cannot be statically verified
;;    Fixes: - Simplify postcondition
;;           - Add runtime verification
;;           - Provide proof steps

(EXPORTS_FUNCTION (NAME "process_order"))
(EXPORTS_FUNCTION (NAME "calculate_discount"))
(EXPORTS_FUNCTION (NAME "safe_divide"))
(EXPORTS_FUNCTION (NAME "accumulate_values"))
(EXPORTS_FUNCTION (NAME "validate_email"))