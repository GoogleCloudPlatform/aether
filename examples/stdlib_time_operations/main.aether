; Time and Date Operations with Standard Library
; Demonstrates time manipulation, formatting, and scheduling

(DEFINE_MODULE
  (NAME "time_operations")
  (INTENT "Demonstrate time/date operations and scheduling")
  
  (IMPORT_MODULE "std.io")
  (IMPORT_MODULE "std.time")
  (IMPORT_MODULE "std.math")
  
  (CONTENT
    (DEFINE_TYPE
      (NAME "event")
      (FIELD (NAME "name") (TYPE STRING))
      (FIELD (NAME "scheduled_time") (TYPE "timestamp"))
      (FIELD (NAME "duration_minutes") (TYPE INT)))
    
    (DEFINE_FUNCTION
      (NAME "format_duration")
      (INTENT "Format duration in human-readable form")
      (ACCEPTS_PARAMETER (NAME "seconds") (TYPE INT))
      (RETURNS (TYPE STRING))
      
      (BODY
        (DECLARE_VARIABLE (NAME "days") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_DIVIDE (VARIABLE_REFERENCE "seconds") (INTEGER_LITERAL 86400))))
        (DECLARE_VARIABLE (NAME "remaining") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_MODULO (VARIABLE_REFERENCE "seconds") (INTEGER_LITERAL 86400))))
        
        (DECLARE_VARIABLE (NAME "hours") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_DIVIDE (VARIABLE_REFERENCE "remaining") (INTEGER_LITERAL 3600))))
        (ASSIGN (TARGET "remaining")
          (SOURCE (EXPRESSION_MODULO (VARIABLE_REFERENCE "remaining") (INTEGER_LITERAL 3600))))
        
        (DECLARE_VARIABLE (NAME "minutes") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_DIVIDE (VARIABLE_REFERENCE "remaining") (INTEGER_LITERAL 60))))
        (DECLARE_VARIABLE (NAME "secs") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_MODULO (VARIABLE_REFERENCE "remaining") (INTEGER_LITERAL 60))))
        
        ; Build formatted string
        (DECLARE_VARIABLE (NAME "result") (TYPE STRING) (INITIAL_VALUE (STRING_LITERAL "")))
        
        (IF_CONDITION (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "days") (INTEGER_LITERAL 0))
          (THEN_EXECUTE
            (ASSIGN (TARGET "result")
              (SOURCE (STRING_CONCAT
                (VARIABLE_REFERENCE "result")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "days"))
                  (IF_EXPRESSION
                    (CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "days") (INTEGER_LITERAL 1)))
                    (THEN_VALUE (STRING_LITERAL " day "))
                    (ELSE_VALUE (STRING_LITERAL " days ")))))))))
        
        (IF_CONDITION (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "hours") (INTEGER_LITERAL 0))
          (THEN_EXECUTE
            (ASSIGN (TARGET "result")
              (SOURCE (STRING_CONCAT
                (VARIABLE_REFERENCE "result")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "hours"))
                  (IF_EXPRESSION
                    (CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "hours") (INTEGER_LITERAL 1)))
                    (THEN_VALUE (STRING_LITERAL " hour "))
                    (ELSE_VALUE (STRING_LITERAL " hours ")))))))))
        
        (IF_CONDITION (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "minutes") (INTEGER_LITERAL 0))
          (THEN_EXECUTE
            (ASSIGN (TARGET "result")
              (SOURCE (STRING_CONCAT
                (VARIABLE_REFERENCE "result")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "minutes"))
                  (IF_EXPRESSION
                    (CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "minutes") (INTEGER_LITERAL 1)))
                    (THEN_VALUE (STRING_LITERAL " minute "))
                    (ELSE_VALUE (STRING_LITERAL " minutes ")))))))))
        
        (IF_CONDITION (LOGICAL_OR
            (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "secs") (INTEGER_LITERAL 0))
            (PREDICATE_EQUALS (VARIABLE_REFERENCE "result") (STRING_LITERAL "")))
          (THEN_EXECUTE
            (ASSIGN (TARGET "result")
              (SOURCE (STRING_CONCAT
                (VARIABLE_REFERENCE "result")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "secs"))
                  (IF_EXPRESSION
                    (CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "secs") (INTEGER_LITERAL 1)))
                    (THEN_VALUE (STRING_LITERAL " second"))
                    (ELSE_VALUE (STRING_LITERAL " seconds")))))))))
        
        (RETURN_VALUE (VARIABLE_REFERENCE "result"))))
    
    (DEFINE_FUNCTION
      (NAME "demonstrate_time_operations")
      (INTENT "Show various time and date operations")
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "=== Time and Date Operations Demo ===\n")))
        
        ; Get current time
        (DECLARE_VARIABLE (NAME "now_ts") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
        
        (DECLARE_VARIABLE (NAME "now_dt") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now_utc" (ARGUMENTS))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Current Unix timestamp: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_ts") "seconds")))))
        
        (DECLARE_VARIABLE (NAME "iso_string") (TYPE STRING)
          (INITIAL_VALUE (CALL_FUNCTION "std.time.format_iso8601"
            (ARGUMENTS (VARIABLE_REFERENCE "now_dt")))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Current time (ISO 8601): ")
            (VARIABLE_REFERENCE "iso_string"))))
        
        ; Display components
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\nDate components:")))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "  Year: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_dt") "year")))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "  Month: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_dt") "month")))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "  Day: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_dt") "day")))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "  Hour: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_dt") "hour")))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "  Minute: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_dt") "minute")))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "  Second: ")
            (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "now_dt") "second")))))
        
        ; Time arithmetic
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\nTime arithmetic:")))
        
        ; Add 1 day
        (DECLARE_VARIABLE (NAME "one_day") (TYPE "duration")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.duration_from_seconds"
            (ARGUMENTS (INTEGER_LITERAL 86400)))))
        
        (DECLARE_VARIABLE (NAME "tomorrow") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.add_duration"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now_ts")
              (VARIABLE_REFERENCE "one_day")))))
        
        (DECLARE_VARIABLE (NAME "tomorrow_dt") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "tomorrow")
              (INTEGER_LITERAL 0)))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Tomorrow: ")
            (CALL_FUNCTION "std.time.format_iso8601"
              (ARGUMENTS (VARIABLE_REFERENCE "tomorrow_dt"))))))
        
        ; Subtract 1 week
        (DECLARE_VARIABLE (NAME "one_week") (TYPE "duration")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.duration_from_seconds"
            (ARGUMENTS (INTEGER_LITERAL 604800))))) ; 7 * 24 * 60 * 60
        
        (DECLARE_VARIABLE (NAME "last_week") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.subtract_duration"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now_ts")
              (VARIABLE_REFERENCE "one_week")))))
        
        (DECLARE_VARIABLE (NAME "last_week_dt") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "last_week")
              (INTEGER_LITERAL 0)))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Last week: ")
            (CALL_FUNCTION "std.time.format_iso8601"
              (ARGUMENTS (VARIABLE_REFERENCE "last_week_dt"))))))
        
        ; Calculate time difference
        (DECLARE_VARIABLE (NAME "diff_seconds") (TYPE INT)
          (INITIAL_VALUE (EXPRESSION_SUBTRACT
            (FIELD_ACCESS (VARIABLE_REFERENCE "tomorrow") "seconds")
            (FIELD_ACCESS (VARIABLE_REFERENCE "last_week") "seconds"))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "\nTime between last week and tomorrow: ")
            (CALL_FUNCTION "format_duration"
              (ARGUMENTS (VARIABLE_REFERENCE "diff_seconds"))))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "demonstrate_scheduling")
      (INTENT "Show event scheduling and time comparisons")
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== Event Scheduling Demo ===\n")))
        
        ; Create events
        (DECLARE_VARIABLE (NAME "events") (TYPE (ARRAY "event" 5)))
        (DECLARE_VARIABLE (NAME "now") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
        
        ; Event 1: Meeting in 30 minutes
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 0))
            "name"))
          (SOURCE (STRING_LITERAL "Team Meeting")))
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 0))
            "scheduled_time"))
          (SOURCE (CALL_FUNCTION "std.time.add_duration"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (CALL_FUNCTION "std.time.duration_from_seconds"
                (ARGUMENTS (INTEGER_LITERAL 1800)))))))
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 0))
            "duration_minutes"))
          (SOURCE (INTEGER_LITERAL 60)))
        
        ; Event 2: Lunch in 2 hours
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 1))
            "name"))
          (SOURCE (STRING_LITERAL "Lunch Break")))
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 1))
            "scheduled_time"))
          (SOURCE (CALL_FUNCTION "std.time.add_duration"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (CALL_FUNCTION "std.time.duration_from_seconds"
                (ARGUMENTS (INTEGER_LITERAL 7200)))))))
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 1))
            "duration_minutes"))
          (SOURCE (INTEGER_LITERAL 45)))
        
        ; Event 3: Code Review tomorrow
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 2))
            "name"))
          (SOURCE (STRING_LITERAL "Code Review")))
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 2))
            "scheduled_time"))
          (SOURCE (CALL_FUNCTION "std.time.add_duration"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (CALL_FUNCTION "std.time.duration_from_seconds"
                (ARGUMENTS (INTEGER_LITERAL 90000)))))))
        (ASSIGN (TARGET (FIELD_ACCESS 
            (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (INTEGER_LITERAL 2))
            "duration_minutes"))
          (SOURCE (INTEGER_LITERAL 90)))
        
        ; Sort events by time (simple bubble sort)
        (DECLARE_VARIABLE (NAME "num_events") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 3)))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") 
            (EXPRESSION_SUBTRACT (VARIABLE_REFERENCE "num_events") (INTEGER_LITERAL 1))))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (FOR_LOOP
              (INIT (DECLARE_VARIABLE (NAME "j") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
              (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "j") 
                (EXPRESSION_SUBTRACT 
                  (EXPRESSION_SUBTRACT (VARIABLE_REFERENCE "num_events") (VARIABLE_REFERENCE "i"))
                  (INTEGER_LITERAL 1))))
              (UPDATE (ASSIGN (TARGET "j") 
                (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 1)))))
              (BODY
                (IF_CONDITION (PREDICATE_GREATER_THAN
                    (CALL_FUNCTION "std.time.timestamp_compare"
                      (ARGUMENTS
                        (FIELD_ACCESS 
                          (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (VARIABLE_REFERENCE "j"))
                          "scheduled_time")
                        (FIELD_ACCESS 
                          (ARRAY_ACCESS (VARIABLE_REFERENCE "events") 
                            (EXPRESSION_ADD (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 1)))
                          "scheduled_time")))
                    (INTEGER_LITERAL 0))
                  (THEN_EXECUTE
                    ; Swap events
                    (DECLARE_VARIABLE (NAME "temp") (TYPE "event")
                      (INITIAL_VALUE (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (VARIABLE_REFERENCE "j"))))
                    (ASSIGN (TARGET (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (VARIABLE_REFERENCE "j")))
                      (SOURCE (ARRAY_ACCESS (VARIABLE_REFERENCE "events") 
                        (EXPRESSION_ADD (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 1)))))
                    (ASSIGN (TARGET (ARRAY_ACCESS (VARIABLE_REFERENCE "events") 
                        (EXPRESSION_ADD (VARIABLE_REFERENCE "j") (INTEGER_LITERAL 1))))
                      (SOURCE (VARIABLE_REFERENCE "temp")))))))))
        
        ; Display schedule
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "Upcoming events:")))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "num_events")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (DECLARE_VARIABLE (NAME "evt") (TYPE "event")
              (INITIAL_VALUE (ARRAY_ACCESS (VARIABLE_REFERENCE "events") (VARIABLE_REFERENCE "i"))))
            
            ; Calculate time until event
            (DECLARE_VARIABLE (NAME "time_until") (TYPE INT)
              (INITIAL_VALUE (EXPRESSION_SUBTRACT
                (FIELD_ACCESS (FIELD_ACCESS (VARIABLE_REFERENCE "evt") "scheduled_time") "seconds")
                (FIELD_ACCESS (VARIABLE_REFERENCE "now") "seconds"))))
            
            ; Convert to datetime for display
            (DECLARE_VARIABLE (NAME "event_dt") (TYPE "datetime")
              (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
                (ARGUMENTS 
                  (FIELD_ACCESS (VARIABLE_REFERENCE "evt") "scheduled_time")
                  (INTEGER_LITERAL 0)))))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "\n")
                (STRING_CONCAT
                  (TO_STRING (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))
                  (STRING_CONCAT
                    (STRING_LITERAL ". ")
                    (STRING_CONCAT
                      (FIELD_ACCESS (VARIABLE_REFERENCE "evt") "name")
                      (STRING_CONCAT
                        (STRING_LITERAL "\n   Time: ")
                        (STRING_CONCAT
                          (CALL_FUNCTION "std.time.format_iso8601"
                            (ARGUMENTS (VARIABLE_REFERENCE "event_dt")))
                          (STRING_CONCAT
                            (STRING_LITERAL "\n   Duration: ")
                            (STRING_CONCAT
                              (TO_STRING (FIELD_ACCESS (VARIABLE_REFERENCE "evt") "duration_minutes"))
                              (STRING_CONCAT
                                (STRING_LITERAL " minutes\n   Starts in: ")
                                (CALL_FUNCTION "format_duration"
                                  (ARGUMENTS (VARIABLE_REFERENCE "time_until"))))))))))))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "demonstrate_timezone_handling")
      (INTENT "Show timezone conversions")
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== Timezone Handling Demo ===\n")))
        
        ; Get current time
        (DECLARE_VARIABLE (NAME "now") (TYPE "timestamp")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now" (ARGUMENTS))))
        
        ; Convert to different timezones
        (DECLARE_VARIABLE (NAME "utc") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (INTEGER_LITERAL 0))))) ; UTC
        
        (DECLARE_VARIABLE (NAME "eastern") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (INTEGER_LITERAL -300))))) ; EST: UTC-5
        
        (DECLARE_VARIABLE (NAME "pacific") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (INTEGER_LITERAL -480))))) ; PST: UTC-8
        
        (DECLARE_VARIABLE (NAME "tokyo") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.timestamp_to_datetime"
            (ARGUMENTS 
              (VARIABLE_REFERENCE "now")
              (INTEGER_LITERAL 540))))) ; JST: UTC+9
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "UTC:     ")
            (CALL_FUNCTION "std.time.format_iso8601"
              (ARGUMENTS (VARIABLE_REFERENCE "utc"))))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Eastern: ")
            (CALL_FUNCTION "std.time.format_iso8601"
              (ARGUMENTS (VARIABLE_REFERENCE "eastern"))))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Pacific: ")
            (CALL_FUNCTION "std.time.format_iso8601"
              (ARGUMENTS (VARIABLE_REFERENCE "pacific"))))))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Tokyo:   ")
            (CALL_FUNCTION "std.time.format_iso8601"
              (ARGUMENTS (VARIABLE_REFERENCE "tokyo"))))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "main")
      (RETURNS (TYPE INT))
      (BODY
        ; Basic time operations
        (CALL_FUNCTION "demonstrate_time_operations" (ARGUMENTS))
        
        ; Event scheduling
        (CALL_FUNCTION "demonstrate_scheduling" (ARGUMENTS))
        
        ; Timezone handling
        (CALL_FUNCTION "demonstrate_timezone_handling" (ARGUMENTS))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "\n=== Time operations demo complete! ===")))
        
        (RETURN_VALUE (INTEGER_LITERAL 0))))
  )
)