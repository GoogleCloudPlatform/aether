;; Demonstration of mutability checking in AetherScript

(module mutability_demo
    ;; Function showing immutable variables
    (function test_immutable () void
        (let ((x 42))  ;; x is immutable by default
            (print_int x)
            ;; (set x 100)  ;; This would fail - cannot assign to immutable variable
            ))
    
    ;; Function showing mutable variables
    (function test_mutable () void
        (let ((mut y 42))  ;; y is explicitly mutable
            (print_int y)
            (set y 100)  ;; This works - y is mutable
            (print_int y)))
    
    ;; Function demonstrating borrowing rules
    (function test_borrowing () void
        (let ((mut data 50))
            ;; Multiple immutable borrows are OK
            (let ((ref1 &data)
                  (ref2 &data))
                (print_int (+ ref1 ref2)))
            
            ;; Mutable borrow requires exclusive access
            (let ((mut_ref &mut data))
                (set mut_ref 75))
            
            ;; After mutable borrow ends, can use data again
            (print_int data)))
    
    ;; Function showing move semantics
    (function test_move_semantics () void
        (let ((value 100))
            ;; Transfer ownership
            (consume_value value)
            ;; value is no longer accessible here
            ;; (print_int value)  ;; This would fail - use after move
            ))
    
    ;; Helper function that takes ownership
    (function consume_value (^integer val) void
        (print_string "Consumed value: ")
        (print_int val)
        (print_string "\n"))
    
    ;; Main function
    (function main () integer
        (print_string "=== Mutability Demo ===\n")
        
        (print_string "\nTesting immutable variables:\n")
        (test_immutable)
        
        (print_string "\nTesting mutable variables:\n")
        (test_mutable)
        
        (print_string "\nTesting borrowing rules:\n")
        (test_borrowing)
        
        (print_string "\nTesting move semantics:\n")
        (test_move_semantics)
        
        0))