;; Simplified LLM Blog Server
;; A working version that demonstrates LLM-style explicit code with current parser capabilities

(DEFINE_MODULE
  (NAME 'simple_llm_blog')
  (INTENT "A simplified blog server demonstrating explicit LLM-style code generation patterns")
  (CONTENT
    ;; External function declarations
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'printf')
      (LIBRARY "libc")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'tcp_listen')
      (LIBRARY "aether_runtime")
      (SYMBOL "tcp_listen")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INTEGER))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'tcp_accept')
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "listener_id") (TYPE INTEGER))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'tcp_read')
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "buffer") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "buffer_size") (TYPE INTEGER))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'tcp_write')
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "data") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "data_size") (TYPE INTEGER))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'tcp_close')
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'aether_malloc')
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "size") (TYPE INTEGER))
    )
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME 'aether_free')
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "ptr") (TYPE STRING))
    )
    
    ;; Helper function to generate HTML page header
    ;; This demonstrates explicit intent-driven function design
    (DEFINE_FUNCTION
      (NAME 'generate_html_header')
      (RETURNS STRING)
      (INTENT "Generate common HTML header with CSS styling for blog pages")
      (BODY
        (RETURN_VALUE "<!DOCTYPE html><html><head><title>AetherScript LLM Blog</title><style>body{font-family:sans-serif;max-width:800px;margin:20px auto;line-height:1.6;}h1,h2{color:#333;}article{border-bottom:1px solid #eee;padding:20px 0;}.meta{color:#666;font-size:0.9em;}</style></head><body><h1>AetherScript LLM Blog</h1>")
      )
    )
    
    ;; Helper function to generate HTML page footer
    (DEFINE_FUNCTION
      (NAME 'generate_html_footer')
      (RETURNS STRING)
      (INTENT "Generate common HTML footer to close page structure")
      (BODY
        (RETURN_VALUE "</body></html>")
      )
    )
    
    ;; Function to generate the main blog list page
    ;; Demonstrates explicit content generation with clear intent
    (DEFINE_FUNCTION
      (NAME 'generate_blog_list')
      (RETURNS STRING)
      (INTENT "Generate HTML for main blog page with list of available posts")
      (BODY
        (DECLARE_VARIABLE (NAME 'html_content') (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE html_content)
          (SOURCE_EXPRESSION (CALL_FUNCTION generate_html_header)))
        
        ;; Add main content section
        (DECLARE_VARIABLE (NAME 'main_content') (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE main_content)
          (SOURCE_EXPRESSION "<h2>Welcome to the AetherScript LLM Blog</h2><p>This blog demonstrates LLM-first design principles with explicit, readable code.</p><h3>Recent Posts:</h3><article><h4><a href=\"/posts/1\">Understanding LLM-First Programming</a></h4><div class=\"meta\">Published: 2025-07-31 | Author: AetherScript Team</div><p>Explore how AetherScript prioritizes code readability for LLMs while maintaining human comprehension...</p></article><article><h4><a href=\"/posts/2\">Explicit Intent in Code Design</a></h4><div class=\"meta\">Published: 2025-07-30 | Author: AetherScript Team</div><p>Learn why explicit intent annotations make code more maintainable and AI-friendly...</p></article><article><h4><a href=\"/posts/3\">Resource Management Made Simple</a></h4><div class=\"meta\">Published: 2025-07-29 | Author: AetherScript Team</div><p>Discover AetherScript's approach to deterministic resource management...</p></article>"))
        
        ;; Combine header, content, and footer
        (DECLARE_VARIABLE (NAME 'complete_page') (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE complete_page)
          (SOURCE_EXPRESSION html_content))
        
        ;; Add main content
        (ASSIGN
          (TARGET_VARIABLE complete_page)
          (SOURCE_EXPRESSION main_content))
        
        ;; Add footer
        (DECLARE_VARIABLE (NAME 'footer_content') (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE footer_content)
          (SOURCE_EXPRESSION (CALL_FUNCTION generate_html_footer)))
        
        (ASSIGN
          (TARGET_VARIABLE complete_page)
          (SOURCE_EXPRESSION footer_content))
        
        (RETURN_VALUE complete_page)
      )
    )
    
    ;; Function to generate individual blog post pages
    (DEFINE_FUNCTION
      (NAME 'generate_blog_post')
      (RETURNS STRING)
      (INTENT "Generate HTML for individual blog post based on post ID")
      (ACCEPTS_PARAMETER (NAME "post_id") (TYPE INTEGER))
      (BODY
        (DECLARE_VARIABLE (NAME 'html_content') (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE html_content)
          (SOURCE_EXPRESSION (CALL_FUNCTION generate_html_header)))
        
        ;; Generate post content based on ID
        (DECLARE_VARIABLE (NAME 'post_content') (TYPE STRING))
        
        ;; Simple post selection based on ID
        (IF_CONDITION
          (PREDICATE_EQUALS post_id 1)
          (THEN_EXECUTE
            (ASSIGN
              (TARGET_VARIABLE post_content)
              (SOURCE_EXPRESSION "<article><h2>Understanding LLM-First Programming</h2><div class=\"meta\">Published: 2025-07-31 | Author: AetherScript Team</div><p>AetherScript represents a paradigm shift in programming language design. By prioritizing clarity for Large Language Models (LLMs), we create code that is not only machine-readable but also highly transparent to AI systems.</p><p>The explicit S-expression syntax ensures that every operation, every intent, and every data flow is immediately apparent. This reduces ambiguity and makes code generation more reliable.</p><p>Key principles include:</p><ul><li>Explicit intent annotations for every function and module</li><li>Clear separation between pure functions and side effects</li><li>Deterministic resource management</li><li>Built-in verification capabilities</li></ul><p><a href=\"/\">← Back to Blog List</a></p></article>"))))
        
        (IF_CONDITION
          (PREDICATE_EQUALS post_id 2)
          (THEN_EXECUTE
            (ASSIGN
              (TARGET_VARIABLE post_content)
              (SOURCE_EXPRESSION "<article><h2>Explicit Intent in Code Design</h2><div class=\"meta\">Published: 2025-07-30 | Author: AetherScript Team</div><p>Every function in AetherScript carries an INTENT annotation that explains its purpose in natural language. This serves multiple purposes:</p><p>1. <strong>LLM Comprehension:</strong> AI systems can immediately understand what a function does without analyzing its implementation.</p><p>2. <strong>Human Documentation:</strong> Developers get built-in documentation that stays synchronized with the code.</p><p>3. <strong>Verification Support:</strong> Intent annotations can be used to generate formal specifications automatically.</p><p>This approach bridges the gap between human intention and machine execution, making code more maintainable and reliable.</p><p><a href=\"/\">← Back to Blog List</a></p></article>"))))
        
        (IF_CONDITION
          (PREDICATE_EQUALS post_id 3)
          (THEN_EXECUTE
            (ASSIGN
              (TARGET_VARIABLE post_content)
              (SOURCE_EXPRESSION "<article><h2>Resource Management Made Simple</h2><div class=\"meta\">Published: 2025-07-29 | Author: AetherScript Team</div><p>AetherScript's RESOURCE_SCOPE construct provides deterministic resource management without the complexity of manual memory management or garbage collection.</p><p>Resources are acquired at scope entry and automatically released at scope exit, regardless of how the scope is exited (normal return, exception, etc.).</p><p>This approach is particularly beneficial for:</p><ul><li>File handle management</li><li>Network connection cleanup</li><li>Memory allocation tracking</li><li>Database transaction boundaries</li></ul><p>The explicit nature makes it easy for LLMs to reason about resource lifecycles and generate correct resource management code.</p><p><a href=\"/\">← Back to Blog List</a></p></article>"))))
        
        ;; Default case for unknown post IDs
        (IF_CONDITION
          (PREDICATE_GREATER_THAN post_id 3)
          (THEN_EXECUTE
            (ASSIGN
              (TARGET_VARIABLE post_content)
              (SOURCE_EXPRESSION "<article><h2>404 - Post Not Found</h2><p>The requested blog post could not be found.</p><p><a href=\"/\">← Back to Blog List</a></p></article>"))))
        
        (IF_CONDITION
          (PREDICATE_LESS_THAN post_id 1)
          (THEN_EXECUTE
            (ASSIGN
              (TARGET_VARIABLE post_content)
              (SOURCE_EXPRESSION "<article><h2>404 - Post Not Found</h2><p>The requested blog post could not be found.</p><p><a href=\"/\">← Back to Blog List</a></p></article>"))))
        
        ;; Combine all parts
        (ASSIGN
          (TARGET_VARIABLE html_content)
          (SOURCE_EXPRESSION post_content))
        
        (DECLARE_VARIABLE (NAME 'footer_content') (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE footer_content)
          (SOURCE_EXPRESSION (CALL_FUNCTION generate_html_footer)))
        
        (ASSIGN
          (TARGET_VARIABLE html_content)
          (SOURCE_EXPRESSION footer_content))
        
        (RETURN_VALUE html_content)
      )
    )
    
    ;; Main request handler that processes HTTP requests
    (DEFINE_FUNCTION
      (NAME 'handle_http_request')
      (RETURNS INTEGER)
      (INTENT "Process incoming HTTP request and send appropriate response")
      (ACCEPTS_PARAMETER (NAME "client_fd") (TYPE INTEGER))
      (BODY
        ;; Read the HTTP request
        (DECLARE_VARIABLE (NAME "buffer") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE buffer)
          (SOURCE_EXPRESSION (CALL_FUNCTION aether_malloc 1024)))
        
        (DECLARE_VARIABLE (NAME "bytes_read") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE bytes_read)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_read client_fd buffer 1024)))
        
        (CALL_FUNCTION printf "Received HTTP request\n")
        
        ;; For simplicity, we'll serve the blog list for root path
        ;; and attempt to parse post IDs from the request
        ;; In a real implementation, we'd parse the HTTP request properly
        
        (DECLARE_VARIABLE (NAME "response_body") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE response_body)
          (SOURCE_EXPRESSION (CALL_FUNCTION generate_blog_list)))
        
        ;; Create HTTP response with proper headers
        (DECLARE_VARIABLE (NAME "http_headers") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE http_headers)
          (SOURCE_EXPRESSION "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8\r\nConnection: close\r\n\r\n"))
        
        ;; Send headers first
        (CALL_FUNCTION tcp_write client_fd http_headers 75)
        
        ;; Send response body
        (CALL_FUNCTION tcp_write client_fd response_body 2048)
        
        ;; Clean up
        (CALL_FUNCTION aether_free buffer)
        
        (CALL_FUNCTION printf "HTTP response sent\n")
        
        (RETURN_VALUE 0)
      )
    )
    
    ;; Server loop that accepts and handles connections
    (DEFINE_FUNCTION
      (NAME 'server_loop')
      (RETURNS INTEGER)
      (INTENT "Main server loop that accepts connections and delegates to request handler")
      (ACCEPTS_PARAMETER (NAME "server_fd") (TYPE INTEGER))
      (BODY
        ;; Accept a connection
        (DECLARE_VARIABLE (NAME "client_fd") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE client_fd)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_accept server_fd)))
        
        ;; Check if connection was accepted successfully
        (IF_CONDITION
          (PREDICATE_LESS_THAN client_fd 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to accept connection, server may be misconfigured\n")
            (RETURN_VALUE 1)))
        
        (CALL_FUNCTION printf "LLM Blog client connected!\n")
        
        ;; Handle the request
        (CALL_FUNCTION handle_http_request client_fd)
        
        ;; Close the client connection
        (CALL_FUNCTION tcp_close client_fd)
        
        (CALL_FUNCTION printf "Connection closed, waiting for next request\n")
        
        ;; Continue server loop
        (RETURN_VALUE (CALL_FUNCTION server_loop server_fd))
      )
    )
    
    ;; Main entry point
    (DEFINE_FUNCTION
      (NAME 'main')
      (RETURNS INTEGER)
      (INTENT "Initialize and start the LLM blog server on port 8080")
      (BODY
        ;; Create server socket
        (DECLARE_VARIABLE (NAME server_fd) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE server_fd)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_listen 8080)))
        
        ;; Check if socket was created successfully
        (IF_CONDITION
          (PREDICATE_LESS_THAN server_fd 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to create server socket\n")
            (RETURN_VALUE 1)))
        
        (CALL_FUNCTION printf "LLM Blog Server listening on port 8080...\n")
        (CALL_FUNCTION printf "Visit http://localhost:8080 to view the blog\n")
        
        ;; Start server loop
        (RETURN_VALUE (CALL_FUNCTION server_loop server_fd))
      )
    )
  )
)