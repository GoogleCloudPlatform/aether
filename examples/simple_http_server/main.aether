(DEFINE_MODULE
  (NAME simple_http_server)
  (INTENT "A very simple HTTP server")
  (CONTENT
    ; Declare external functions
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_listen)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_accept)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "listener_id") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_read)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "buffer") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "buffer_size") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_write)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "data") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "data_size") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_close)
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME aether_malloc)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "size") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME aether_free)
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "ptr") (TYPE STRING)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (INTENT "Simple HTTP server that responds with Hello World")
      (RETURNS INTEGER)
      (BODY
        ; Create server socket on port 12345
        (DECLARE_VARIABLE (NAME "server_fd") (TYPE INTEGER))
        (ASSIGN 
          (TARGET_VARIABLE server_fd)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_listen 12345)))
        
        ; Check if socket was created successfully
        (IF_CONDITION
          (PREDICATE_LESS_THAN server_fd 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to create server socket\n")
            (RETURN_VALUE 1)))
        
        (CALL_FUNCTION printf "HTTP Server listening on port 12345...\n")
        
        ; Simple server loop - accept one connection
        (DECLARE_VARIABLE (NAME "client_fd") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE client_fd)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_accept server_fd)))
        
        (IF_CONDITION
          (PREDICATE_LESS_THAN client_fd 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to accept connection\n")
            (CALL_FUNCTION tcp_close server_fd)
            (RETURN_VALUE 1)))
        
        (CALL_FUNCTION printf "Client connected!\n")
        
        ; Read request (we'll ignore it for now)
        (DECLARE_VARIABLE (NAME "buffer") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE buffer)
          (SOURCE_EXPRESSION (CALL_FUNCTION aether_malloc 1024)))
        
        (DECLARE_VARIABLE (NAME "bytes_read") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE bytes_read)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_read client_fd buffer 1024)))
        
        ; Send HTTP response
        (DECLARE_VARIABLE (NAME "response") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE response)
          (SOURCE_EXPRESSION "HTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 13\n\nHello World!\n"))
        
        (CALL_FUNCTION tcp_write client_fd response 77)
        
        ; Clean up
        (CALL_FUNCTION tcp_close client_fd)
        (CALL_FUNCTION tcp_close server_fd)
        (CALL_FUNCTION aether_free buffer)
        
        (CALL_FUNCTION printf "Server shutting down\n")
        (RETURN_VALUE 0)
      )
    )
  )
)