(DEFINE_MODULE
  (NAME arithmetic_operations)
  (INTENT "Demonstrate arithmetic and mathematical operations")
  (CONTENT
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING))
      (RETURNS INTEGER))
    
    (DEFINE_FUNCTION
      (NAME test_basic_arithmetic)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME a) (TYPE INTEGER))
        (DECLARE_VARIABLE (NAME b) (TYPE INTEGER))
        (DECLARE_VARIABLE (NAME result) (TYPE INTEGER))
        
        (ASSIGN
          (TARGET_VARIABLE a)
          (SOURCE_EXPRESSION 10))
        
        (ASSIGN
          (TARGET_VARIABLE b)
          (SOURCE_EXPRESSION 3))
        
        ; Addition
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_ADD a b)))
        (CALL_FUNCTION printf "%d + %d = %d\n" a b result)
        
        ; Subtraction
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_SUBTRACT a b)))
        (CALL_FUNCTION printf "%d - %d = %d\n" a b result)
        
        ; Multiplication
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_MULTIPLY a b)))
        (CALL_FUNCTION printf "%d * %d = %d\n" a b result)
        
        ; Integer division
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_INTEGER_DIVIDE a b)))
        (CALL_FUNCTION printf "%d // %d = %d\n" a b result)
        
        ; Modulo
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_MODULO a b)))
        (CALL_FUNCTION printf "%d %% %d = %d\n" a b result)
        
        ; Negation
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_NEGATE a)))
        (CALL_FUNCTION printf "-%d = %d\n" a result)
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_float_arithmetic)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME x) (TYPE FLOAT))
        (DECLARE_VARIABLE (NAME y) (TYPE FLOAT))
        (DECLARE_VARIABLE (NAME result) (TYPE FLOAT))
        
        (ASSIGN
          (TARGET_VARIABLE x)
          (SOURCE_EXPRESSION 3.14))
        
        (ASSIGN
          (TARGET_VARIABLE y)
          (SOURCE_EXPRESSION 2.0))
        
        ; Float addition
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_ADD x y)))
        (CALL_FUNCTION printf "%.2f + %.2f = %.2f\n" x y result)
        
        ; Float subtraction
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_SUBTRACT x y)))
        (CALL_FUNCTION printf "%.2f - %.2f = %.2f\n" x y result)
        
        ; Float multiplication
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_MULTIPLY x y)))
        (CALL_FUNCTION printf "%.2f * %.2f = %.2f\n" x y result)
        
        ; Float division
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (EXPRESSION_DIVIDE x y)))
        (CALL_FUNCTION printf "%.2f / %.2f = %.2f\n" x y result)
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_complex_expressions)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME a) (TYPE INTEGER))
        (DECLARE_VARIABLE (NAME b) (TYPE INTEGER))
        (DECLARE_VARIABLE (NAME c) (TYPE INTEGER))
        (DECLARE_VARIABLE (NAME result) (TYPE INTEGER))
        
        (ASSIGN
          (TARGET_VARIABLE a)
          (SOURCE_EXPRESSION 5))
        
        (ASSIGN
          (TARGET_VARIABLE b)
          (SOURCE_EXPRESSION 3))
        
        (ASSIGN
          (TARGET_VARIABLE c)
          (SOURCE_EXPRESSION 2))
        
        ; Complex expression: (a + b) * c
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION 
            (EXPRESSION_MULTIPLY
              (EXPRESSION_ADD a b)
              c)))
        (CALL_FUNCTION printf "(%d + %d) * %d = %d\n" a b c result)
        
        ; Complex expression: a + b * c
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION 
            (EXPRESSION_ADD
              a
              (EXPRESSION_MULTIPLY b c))))
        (CALL_FUNCTION printf "%d + %d * %d = %d\n" a b c result)
        
        ; Complex expression: (a - b) / c
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION 
            (EXPRESSION_INTEGER_DIVIDE
              (EXPRESSION_SUBTRACT a b)
              c)))
        (CALL_FUNCTION printf "(%d - %d) / %d = %d\n" a b c result)
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        (CALL_FUNCTION test_basic_arithmetic)
        (CALL_FUNCTION test_float_arithmetic)
        (CALL_FUNCTION test_complex_expressions)
        (RETURN_VALUE 0)))
  )
)