(DEFINE_MODULE
  (NAME maps)
  (INTENT "Demonstrate map/dictionary operations")
  (CONTENT
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING))
      (RETURNS INTEGER))
    
    (DEFINE_FUNCTION
      (NAME test_map_operations)
      (RETURNS INTEGER)
      (BODY
        ; Create a map from string to integer
        (DECLARE_VARIABLE (NAME scores) (TYPE (MAP_FROM_TYPE_TO_TYPE STRING INTEGER)))
        
        ; Initialize map with literal
        (ASSIGN
          (TARGET_VARIABLE scores)
          (SOURCE_EXPRESSION 
            (MAP_LITERAL
              (ENTRY (KEY "Alice") (VALUE 95))
              (ENTRY (KEY "Bob") (VALUE 87))
              (ENTRY (KEY "Charlie") (VALUE 92)))))
        
        ; Get value from map
        (DECLARE_VARIABLE (NAME alice_score) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE alice_score)
          (SOURCE_EXPRESSION (GET_MAP_VALUE scores "Alice")))
        
        (CALL_FUNCTION printf "Alice's score: %d\n" alice_score)
        
        ; Set/update value in map
        (SET_MAP_VALUE scores "David" 89)
        (SET_MAP_VALUE scores "Bob" 90)  ; Update existing
        
        ; Get updated value
        (DECLARE_VARIABLE (NAME bob_score) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE bob_score)
          (SOURCE_EXPRESSION (GET_MAP_VALUE scores "Bob")))
        
        (CALL_FUNCTION printf "Bob's updated score: %d\n" bob_score)
        
        ; Check if key exists (hypothetical operation)
        (DECLARE_VARIABLE (NAME david_score) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE david_score)
          (SOURCE_EXPRESSION (GET_MAP_VALUE scores "David")))
        
        (CALL_FUNCTION printf "David's score: %d\n" david_score)
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_nested_maps)
      (RETURNS INTEGER)
      (BODY
        ; Map of string to map of string to integer
        ; Representing grades by subject for each student
        (DECLARE_VARIABLE (NAME student_grades) 
          (TYPE (MAP_FROM_TYPE_TO_TYPE STRING (MAP_FROM_TYPE_TO_TYPE STRING INTEGER))))
        
        ; Create subject grades for Alice
        (DECLARE_VARIABLE (NAME alice_grades) (TYPE (MAP_FROM_TYPE_TO_TYPE STRING INTEGER)))
        (ASSIGN
          (TARGET_VARIABLE alice_grades)
          (SOURCE_EXPRESSION
            (MAP_LITERAL
              (ENTRY (KEY "Math") (VALUE 95))
              (ENTRY (KEY "Science") (VALUE 92))
              (ENTRY (KEY "English") (VALUE 88)))))
        
        ; Create subject grades for Bob
        (DECLARE_VARIABLE (NAME bob_grades) (TYPE (MAP_FROM_TYPE_TO_TYPE STRING INTEGER)))
        (ASSIGN
          (TARGET_VARIABLE bob_grades)
          (SOURCE_EXPRESSION
            (MAP_LITERAL
              (ENTRY (KEY "Math") (VALUE 87))
              (ENTRY (KEY "Science") (VALUE 90))
              (ENTRY (KEY "English") (VALUE 91)))))
        
        ; Add to main map
        (SET_MAP_VALUE student_grades "Alice" alice_grades)
        (SET_MAP_VALUE student_grades "Bob" bob_grades)
        
        ; Access nested values
        (DECLARE_VARIABLE (NAME alice_math) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE alice_math)
          (SOURCE_EXPRESSION 
            (GET_MAP_VALUE 
              (GET_MAP_VALUE student_grades "Alice")
              "Math")))
        
        (CALL_FUNCTION printf "Alice's Math grade: %d\n" alice_math)
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_map_with_custom_types)
      (RETURNS INTEGER)
      (BODY
        ; Define a type alias for user ID
        (DEFINE_TYPE_ALIAS (NAME UserId) (TYPE INTEGER))
        
        ; Map from UserId to string (user names)
        (DECLARE_VARIABLE (NAME user_names) (TYPE (MAP_FROM_TYPE_TO_TYPE UserId STRING)))
        
        (ASSIGN
          (TARGET_VARIABLE user_names)
          (SOURCE_EXPRESSION
            (MAP_LITERAL
              (ENTRY (KEY 1001) (VALUE "Alice"))
              (ENTRY (KEY 1002) (VALUE "Bob"))
              (ENTRY (KEY 1003) (VALUE "Charlie")))))
        
        ; Look up user name
        (DECLARE_VARIABLE (NAME user_name) (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE user_name)
          (SOURCE_EXPRESSION (GET_MAP_VALUE user_names 1002)))
        
        (CALL_FUNCTION printf "User 1002 is: %s\n" user_name)
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        (CALL_FUNCTION test_map_operations)
        (CALL_FUNCTION test_nested_maps)
        (CALL_FUNCTION test_map_with_custom_types)
        (RETURN_VALUE 0)))
  )
)