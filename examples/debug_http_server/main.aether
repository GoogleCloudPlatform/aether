(DEFINE_MODULE
  (NAME debug_http_server)
  (INTENT "Debug version of HTTP server")
  (CONTENT
    ; Declare external functions
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_listen)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_close)
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (INTENT "Debug HTTP server")
      (RETURNS INTEGER)
      (BODY
        ; Create server socket on port 8888
        (DECLARE_VARIABLE (NAME "server_fd") (TYPE INTEGER))
        (ASSIGN 
          (TARGET_VARIABLE server_fd)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_listen 9999)))
        
        ; Debug: print the actual return value
        (CALL_FUNCTION printf "tcp_listen returned: %d\n" server_fd)
        
        ; Check if socket was created successfully
        (IF_CONDITION
          (PREDICATE_LESS_THAN server_fd 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to create server socket (value was < 0)\n")
            (RETURN_VALUE 1))
          (ELSE_EXECUTE
            (CALL_FUNCTION printf "Server socket created successfully (value was >= 0)\n")))
        
        ; Clean up
        (CALL_FUNCTION tcp_close server_fd)
        (CALL_FUNCTION printf "Server shutting down\n")
        (RETURN_VALUE 0)
      )
    )
  )
)