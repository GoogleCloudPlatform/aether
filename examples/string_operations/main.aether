(DEFINE_MODULE
  (NAME string_operations)
  (INTENT "Demonstrate string manipulation functions")
  (CONTENT
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING))
      (RETURNS INTEGER))
    
    (DEFINE_FUNCTION
      (NAME test_string_concat)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME str1) (TYPE STRING))
        (DECLARE_VARIABLE (NAME str2) (TYPE STRING))
        (DECLARE_VARIABLE (NAME result) (TYPE STRING))
        
        (ASSIGN
          (TARGET_VARIABLE str1)
          (SOURCE_EXPRESSION "Hello, "))
        
        (ASSIGN
          (TARGET_VARIABLE str2)
          (SOURCE_EXPRESSION "World!"))
        
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (STRING_CONCAT str1 str2)))
        
        (CALL_FUNCTION printf "Concatenated: %s\n" result)
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_string_length)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME str) (TYPE STRING))
        (DECLARE_VARIABLE (NAME len) (TYPE INTEGER))
        
        (ASSIGN
          (TARGET_VARIABLE str)
          (SOURCE_EXPRESSION "Hello, World!"))
        
        (ASSIGN
          (TARGET_VARIABLE len)
          (SOURCE_EXPRESSION (STRING_LENGTH str)))
        
        (CALL_FUNCTION printf "Length of '%s': %d\n" str len)
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_string_char_at)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME str) (TYPE STRING))
        (DECLARE_VARIABLE (NAME ch) (TYPE CHAR))
        
        (ASSIGN
          (TARGET_VARIABLE str)
          (SOURCE_EXPRESSION "Hello"))
        
        (ASSIGN
          (TARGET_VARIABLE ch)
          (SOURCE_EXPRESSION (STRING_CHAR_AT str 1)))
        
        (CALL_FUNCTION printf "Character at index 1: %c\n" ch)
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_substring)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME str) (TYPE STRING))
        (DECLARE_VARIABLE (NAME sub) (TYPE STRING))
        
        (ASSIGN
          (TARGET_VARIABLE str)
          (SOURCE_EXPRESSION "Hello, World!"))
        
        (ASSIGN
          (TARGET_VARIABLE sub)
          (SOURCE_EXPRESSION (SUBSTRING str 7 5)))
        
        (CALL_FUNCTION printf "Substring(7, 5): %s\n" sub)
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_string_equals)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME str1) (TYPE STRING))
        (DECLARE_VARIABLE (NAME str2) (TYPE STRING))
        (DECLARE_VARIABLE (NAME str3) (TYPE STRING))
        
        (ASSIGN
          (TARGET_VARIABLE str1)
          (SOURCE_EXPRESSION "Hello"))
        
        (ASSIGN
          (TARGET_VARIABLE str2)
          (SOURCE_EXPRESSION "Hello"))
        
        (ASSIGN
          (TARGET_VARIABLE str3)
          (SOURCE_EXPRESSION "World"))
        
        (IF_CONDITION
          (STRING_EQUALS str1 str2)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "str1 equals str2\n"))
          (ELSE_EXECUTE
            (CALL_FUNCTION printf "str1 does not equal str2\n")))
        
        (IF_CONDITION
          (STRING_EQUALS str1 str3)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "str1 equals str3\n"))
          (ELSE_EXECUTE
            (CALL_FUNCTION printf "str1 does not equal str3\n")))
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME test_string_contains)
      (RETURNS INTEGER)
      (BODY
        (DECLARE_VARIABLE (NAME str) (TYPE STRING))
        (DECLARE_VARIABLE (NAME needle) (TYPE STRING))
        
        (ASSIGN
          (TARGET_VARIABLE str)
          (SOURCE_EXPRESSION "Hello, World!"))
        
        (ASSIGN
          (TARGET_VARIABLE needle)
          (SOURCE_EXPRESSION "World"))
        
        (IF_CONDITION
          (STRING_CONTAINS str needle)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "'%s' contains '%s'\n" str needle))
          (ELSE_EXECUTE
            (CALL_FUNCTION printf "'%s' does not contain '%s'\n" str needle)))
        
        (RETURN_VALUE 0)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        (CALL_FUNCTION test_string_concat)
        (CALL_FUNCTION test_string_length)
        (CALL_FUNCTION test_string_char_at)
        (CALL_FUNCTION test_substring)
        (CALL_FUNCTION test_string_equals)
        (CALL_FUNCTION test_string_contains)
        (RETURN_VALUE 0)))
  )
)