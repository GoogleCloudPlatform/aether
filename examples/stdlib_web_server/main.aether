; Simple Web Server using Standard Library
; Demonstrates networking, concurrency, and I/O operations

(DEFINE_MODULE
  (NAME "web_server")
  (INTENT "Simple HTTP server using AetherScript standard library")
  
  (IMPORT_MODULE "std.io")
  (IMPORT_MODULE "std.net")
  (IMPORT_MODULE "std.concurrency")
  (IMPORT_MODULE "std.time")
  
  (CONTENT
    (DEFINE_TYPE
      (NAME "client_context")
      (FIELD (NAME "socket") (TYPE "socket"))
      (FIELD (NAME "address") (TYPE STRING))
      (FIELD (NAME "request_time") (TYPE "timestamp")))
    
    (DEFINE_FUNCTION
      (NAME "handle_client")
      (INTENT "Handle individual client connection")
      (ACCEPTS_PARAMETER (NAME "client") (TYPE "socket"))
      (RETURNS (TYPE VOID))
      
      (BODY
        (TRY_EXECUTE
          (PROTECTED_BLOCK
            ; Read HTTP request
            (DECLARE_VARIABLE (NAME "request") (TYPE STRING)
              (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_receive"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "client")
                  (INTEGER_LITERAL 4096)
                  (INTEGER_LITERAL 5000))))) ; 5 second timeout
            
            (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "request") (STRING_LITERAL ""))
              (THEN_EXECUTE
                (CALL_FUNCTION "std.net.tcp_close"
                  (ARGUMENTS (VARIABLE_REFERENCE "client")))
                (RETURN_VOID)))
            
            ; Log request
            (DECLARE_VARIABLE (NAME "timestamp") (TYPE "datetime")
              (INITIAL_VALUE (CALL_FUNCTION "std.time.now_utc" (ARGUMENTS))))
            
            (DECLARE_VARIABLE (NAME "time_str") (TYPE STRING)
              (INITIAL_VALUE (CALL_FUNCTION "std.time.format_iso8601"
                (ARGUMENTS (VARIABLE_REFERENCE "timestamp")))))
            
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_CONCAT
                (STRING_LITERAL "[")
                (STRING_CONCAT
                  (VARIABLE_REFERENCE "time_str")
                  (STRING_CONCAT
                    (STRING_LITERAL "] Received request: ")
                    (CALL_FUNCTION "get_first_line"
                      (ARGUMENTS (VARIABLE_REFERENCE "request"))))))))
            
            ; Parse request method and path
            (DECLARE_VARIABLE (NAME "method") (TYPE STRING))
            (DECLARE_VARIABLE (NAME "path") (TYPE STRING))
            (CALL_FUNCTION "parse_request_line"
              (ARGUMENTS 
                (VARIABLE_REFERENCE "request")
                (ADDRESS_OF (VARIABLE_REFERENCE "method"))
                (ADDRESS_OF (VARIABLE_REFERENCE "path"))))
            
            ; Generate response based on path
            (DECLARE_VARIABLE (NAME "response") (TYPE STRING))
            (DECLARE_VARIABLE (NAME "status_code") (TYPE INT))
            
            (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "path") (STRING_LITERAL "/"))
              (THEN_EXECUTE
                (ASSIGN (TARGET "status_code") (SOURCE (INTEGER_LITERAL 200)))
                (ASSIGN (TARGET "response")
                  (SOURCE (CALL_FUNCTION "generate_home_page" (ARGUMENTS)))))
              (ELSE_EXECUTE
                (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "path") (STRING_LITERAL "/stats"))
                  (THEN_EXECUTE
                    (ASSIGN (TARGET "status_code") (SOURCE (INTEGER_LITERAL 200)))
                    (ASSIGN (TARGET "response")
                      (SOURCE (CALL_FUNCTION "generate_stats_page" (ARGUMENTS)))))
                  (ELSE_EXECUTE
                    (ASSIGN (TARGET "status_code") (SOURCE (INTEGER_LITERAL 404)))
                    (ASSIGN (TARGET "response")
                      (SOURCE (STRING_LITERAL "<html><body><h1>404 Not Found</h1></body></html>")))))))
            
            ; Build HTTP response
            (DECLARE_VARIABLE (NAME "http_response") (TYPE STRING)
              (INITIAL_VALUE (STRING_CONCAT
                (STRING_LITERAL "HTTP/1.1 ")
                (STRING_CONCAT
                  (TO_STRING (VARIABLE_REFERENCE "status_code"))
                  (STRING_CONCAT
                    (IF_EXPRESSION
                      (CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "status_code") (INTEGER_LITERAL 200)))
                      (THEN_VALUE (STRING_LITERAL " OK"))
                      (ELSE_VALUE (STRING_LITERAL " Not Found")))
                    (STRING_CONCAT
                      (STRING_LITERAL "\r\nContent-Type: text/html\r\n")
                      (STRING_CONCAT
                        (STRING_LITERAL "Content-Length: ")
                        (STRING_CONCAT
                          (TO_STRING (CALL_FUNCTION "string_length" 
                            (ARGUMENTS (VARIABLE_REFERENCE "response"))))
                          (STRING_CONCAT
                            (STRING_LITERAL "\r\nConnection: close\r\n\r\n")
                            (VARIABLE_REFERENCE "response"))))))))))
            
            ; Send response
            (CALL_FUNCTION "std.net.tcp_send"
              (ARGUMENTS 
                (VARIABLE_REFERENCE "client")
                (VARIABLE_REFERENCE "http_response")))
            
            ; Close connection
            (CALL_FUNCTION "std.net.tcp_close"
              (ARGUMENTS (VARIABLE_REFERENCE "client")))
            
            (RETURN_VOID))
          
          (CATCH_EXCEPTION
            (EXCEPTION_TYPE "network_error")
            (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
            (HANDLER_BLOCK
              (CALL_FUNCTION "std.io.println"
                (ARGUMENTS (STRING_CONCAT
                  (STRING_LITERAL "Network error: ")
                  (FIELD_ACCESS (VARIABLE_REFERENCE "e") "message"))))
              (CALL_FUNCTION "std.net.tcp_close"
                (ARGUMENTS (VARIABLE_REFERENCE "client"))))))))
    
    (DEFINE_FUNCTION
      (NAME "get_first_line")
      (ACCEPTS_PARAMETER (NAME "text") (TYPE STRING))
      (RETURNS (TYPE STRING))
      (BODY
        (DECLARE_VARIABLE (NAME "newline_pos") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL -1)))
        (DECLARE_VARIABLE (NAME "len") (TYPE INT)
          (INITIAL_VALUE (CALL_FUNCTION "string_length" 
            (ARGUMENTS (VARIABLE_REFERENCE "text")))))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "len")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (IF_CONDITION (PREDICATE_EQUALS 
                (CALL_FUNCTION "string_char_at"
                  (ARGUMENTS (VARIABLE_REFERENCE "text") (VARIABLE_REFERENCE "i")))
                (CHAR_LITERAL '\n'))
              (THEN_EXECUTE
                (ASSIGN (TARGET "newline_pos") (SOURCE (VARIABLE_REFERENCE "i")))
                (BREAK_LOOP)))))
        
        (IF_CONDITION (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "newline_pos") (INTEGER_LITERAL 0))
          (THEN_EXECUTE
            (RETURN_VALUE (CALL_FUNCTION "substring"
              (ARGUMENTS 
                (VARIABLE_REFERENCE "text")
                (INTEGER_LITERAL 0)
                (VARIABLE_REFERENCE "newline_pos")))))
          (ELSE_EXECUTE
            (RETURN_VALUE (VARIABLE_REFERENCE "text"))))))
    
    (DEFINE_FUNCTION
      (NAME "parse_request_line")
      (ACCEPTS_PARAMETER (NAME "request") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "method") (TYPE (POINTER STRING)))
      (ACCEPTS_PARAMETER (NAME "path") (TYPE (POINTER STRING)))
      (RETURNS (TYPE VOID))
      (BODY
        ; Simple parsing - assumes "METHOD /path HTTP/1.1" format
        (DECLARE_VARIABLE (NAME "first_line") (TYPE STRING)
          (INITIAL_VALUE (CALL_FUNCTION "get_first_line"
            (ARGUMENTS (VARIABLE_REFERENCE "request")))))
        
        ; Find first space
        (DECLARE_VARIABLE (NAME "first_space") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL -1)))
        (DECLARE_VARIABLE (NAME "second_space") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL -1)))
        (DECLARE_VARIABLE (NAME "len") (TYPE INT)
          (INITIAL_VALUE (CALL_FUNCTION "string_length" 
            (ARGUMENTS (VARIABLE_REFERENCE "first_line")))))
        
        (FOR_LOOP
          (INIT (DECLARE_VARIABLE (NAME "i") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 0))))
          (CONDITION (PREDICATE_LESS_THAN (VARIABLE_REFERENCE "i") (VARIABLE_REFERENCE "len")))
          (UPDATE (ASSIGN (TARGET "i") 
            (SOURCE (EXPRESSION_ADD (VARIABLE_REFERENCE "i") (INTEGER_LITERAL 1)))))
          (BODY
            (IF_CONDITION (PREDICATE_EQUALS 
                (CALL_FUNCTION "string_char_at"
                  (ARGUMENTS (VARIABLE_REFERENCE "first_line") (VARIABLE_REFERENCE "i")))
                (CHAR_LITERAL ' '))
              (THEN_EXECUTE
                (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "first_space") (INTEGER_LITERAL -1))
                  (THEN_EXECUTE
                    (ASSIGN (TARGET "first_space") (SOURCE (VARIABLE_REFERENCE "i"))))
                  (ELSE_EXECUTE
                    (IF_CONDITION (PREDICATE_EQUALS (VARIABLE_REFERENCE "second_space") (INTEGER_LITERAL -1))
                      (THEN_EXECUTE
                        (ASSIGN (TARGET "second_space") (SOURCE (VARIABLE_REFERENCE "i")))
                        (BREAK_LOOP)))))))))
        
        ; Extract method and path
        (IF_CONDITION (LOGICAL_AND
            (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "first_space") (INTEGER_LITERAL 0))
            (PREDICATE_GREATER_THAN (VARIABLE_REFERENCE "second_space") (VARIABLE_REFERENCE "first_space")))
          (THEN_EXECUTE
            (ASSIGN (TARGET (DEREFERENCE (VARIABLE_REFERENCE "method")))
              (SOURCE (CALL_FUNCTION "substring"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "first_line")
                  (INTEGER_LITERAL 0)
                  (VARIABLE_REFERENCE "first_space")))))
            
            (ASSIGN (TARGET (DEREFERENCE (VARIABLE_REFERENCE "path")))
              (SOURCE (CALL_FUNCTION "substring"
                (ARGUMENTS 
                  (VARIABLE_REFERENCE "first_line")
                  (EXPRESSION_ADD (VARIABLE_REFERENCE "first_space") (INTEGER_LITERAL 1))
                  (EXPRESSION_SUBTRACT 
                    (VARIABLE_REFERENCE "second_space")
                    (EXPRESSION_ADD (VARIABLE_REFERENCE "first_space") (INTEGER_LITERAL 1))))))))
          (ELSE_EXECUTE
            (ASSIGN (TARGET (DEREFERENCE (VARIABLE_REFERENCE "method")))
              (SOURCE (STRING_LITERAL "GET")))
            (ASSIGN (TARGET (DEREFERENCE (VARIABLE_REFERENCE "path")))
              (SOURCE (STRING_LITERAL "/")))))
        
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "generate_home_page")
      (RETURNS (TYPE STRING))
      (BODY
        (RETURN_VALUE (STRING_LITERAL "<html>
<head><title>AetherScript Web Server</title></head>
<body>
  <h1>Welcome to AetherScript Web Server!</h1>
  <p>This server is written entirely in AetherScript using the standard library.</p>
  <h2>Features:</h2>
  <ul>
    <li>HTTP request handling</li>
    <li>Concurrent client connections</li>
    <li>Resource-safe networking</li>
    <li>Automatic cleanup</li>
  </ul>
  <p><a href='/stats'>View Server Statistics</a></p>
</body>
</html>"))))
    
    (DEFINE_FUNCTION
      (NAME "generate_stats_page")
      (RETURNS (TYPE STRING))
      (BODY
        (DECLARE_VARIABLE (NAME "current_time") (TYPE "datetime")
          (INITIAL_VALUE (CALL_FUNCTION "std.time.now_utc" (ARGUMENTS))))
        
        (DECLARE_VARIABLE (NAME "time_str") (TYPE STRING)
          (INITIAL_VALUE (CALL_FUNCTION "std.time.format_iso8601"
            (ARGUMENTS (VARIABLE_REFERENCE "current_time")))))
        
        (RETURN_VALUE (STRING_CONCAT
          (STRING_LITERAL "<html>
<head><title>Server Statistics</title></head>
<body>
  <h1>Server Statistics</h1>
  <p>Current time: ")
          (STRING_CONCAT
            (VARIABLE_REFERENCE "time_str")
            (STRING_LITERAL "</p>
  <p>Server is running with AetherScript standard library!</p>
  <p><a href='/'>Back to Home</a></p>
</body>
</html>"))))))
    
    (DEFINE_FUNCTION
      (NAME "run_server")
      (INTENT "Main server loop")
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INT))
      (RETURNS (TYPE VOID))
      
      (BODY
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_CONCAT
            (STRING_LITERAL "Starting AetherScript Web Server on port ")
            (TO_STRING (VARIABLE_REFERENCE "port")))))
        
        ; Create server socket
        (DECLARE_VARIABLE (NAME "server") (TYPE "socket")
          (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_listen"
            (ARGUMENTS 
              (STRING_LITERAL "0.0.0.0")
              (VARIABLE_REFERENCE "port")))))
        
        (IF_CONDITION (PREDICATE_NOT (FIELD_ACCESS (VARIABLE_REFERENCE "server") "is_connected"))
          (THEN_EXECUTE
            (CALL_FUNCTION "std.io.println"
              (ARGUMENTS (STRING_LITERAL "Failed to start server")))
            (RETURN_VOID)))
        
        (CALL_FUNCTION "std.io.println"
          (ARGUMENTS (STRING_LITERAL "Server is running. Press Ctrl+C to stop.")))
        
        ; Main server loop
        (WHILE_LOOP
          (CONDITION (BOOL_LITERAL TRUE))
          (BODY
            (TRY_EXECUTE
              (PROTECTED_BLOCK
                ; Accept client connection
                (DECLARE_VARIABLE (NAME "client") (TYPE "socket")
                  (INITIAL_VALUE (CALL_FUNCTION "std.net.tcp_accept"
                    (ARGUMENTS 
                      (VARIABLE_REFERENCE "server")
                      (INTEGER_LITERAL -1))))) ; No timeout
                
                (IF_CONDITION (FIELD_ACCESS (VARIABLE_REFERENCE "client") "is_connected")
                  (THEN_EXECUTE
                    ; Handle client in a new thread
                    (DECLARE_VARIABLE (NAME "client_thread") (TYPE "thread")
                      (INITIAL_VALUE (CALL_FUNCTION "std.concurrency.thread_create"
                        (ARGUMENTS 
                          (LAMBDA () 
                            (CALL_FUNCTION "handle_client"
                              (ARGUMENTS (VARIABLE_REFERENCE "client"))))
                          (INTEGER_LITERAL 65536))))) ; 64KB stack
                    
                    ; Detach thread (let it run independently)
                    )))
              
              (CATCH_EXCEPTION
                (EXCEPTION_TYPE "network_error")
                (BINDING_VARIABLE (NAME "e") (TYPE "network_error"))
                (HANDLER_BLOCK
                  (CALL_FUNCTION "std.io.println"
                    (ARGUMENTS (STRING_CONCAT
                      (STRING_LITERAL "Server error: ")
                      (FIELD_ACCESS (VARIABLE_REFERENCE "e") "message"))))))))))
        
        (CALL_FUNCTION "std.net.tcp_close"
          (ARGUMENTS (VARIABLE_REFERENCE "server")))
        (RETURN_VOID)))
    
    (DEFINE_FUNCTION
      (NAME "main")
      (RETURNS (TYPE INT))
      (BODY
        (DECLARE_VARIABLE (NAME "port") (TYPE INT) (INITIAL_VALUE (INTEGER_LITERAL 8080)))
        
        (CALL_FUNCTION "run_server"
          (ARGUMENTS (VARIABLE_REFERENCE "port")))
        
        (RETURN_VALUE (INTEGER_LITERAL 0))))
  )
)