(DEFINE_MODULE
  (NAME http_server_example)
  (INTENT "A simple HTTP server demonstrating AetherScript's web capabilities")
  (CONTENT
    ; Declare external functions
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_server)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "host") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME socket_accept)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "server_fd") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME socket_receive)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "socket_fd") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "buffer_size") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME socket_send)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_fd") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "data") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME socket_close)
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "socket_fd") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME parse_request)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "request_data") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME is_get)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "method") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME create_response)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "status_code") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "body") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME json_response)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "json_body") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "status_code") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME create_object)
      (LIBRARY "aether_runtime")
      (RETURNS STRING))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME json_set_field)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "json_obj") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "field") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "value") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME stringify_json)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "json") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME create_array)
      (LIBRARY "aether_runtime")
      (RETURNS STRING))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME json_array_push)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "json_array") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "item") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME json_array_length)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "json_array") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME from_string)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "s") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME from_integer)
      (LIBRARY "aether_runtime")
      (RETURNS STRING)
      (ACCEPTS_PARAMETER (NAME "n") (TYPE INTEGER)))
    
    ; Main server function
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        ; Create a TCP server socket
        (DECLARE_VARIABLE (NAME "server_socket") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE server_socket)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_server "0.0.0.0" 8080)))
        
        (CALL_FUNCTION printf "HTTP Server listening on port 8080...\n")
        
        ; Handle one request (simplified for now)
        ; Accept incoming connection
        (DECLARE_VARIABLE (NAME "client_socket") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE client_socket)
          (SOURCE_EXPRESSION (CALL_FUNCTION socket_accept server_socket)))
        
        ; Read request
        (DECLARE_VARIABLE (NAME "request_data") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE request_data)
          (SOURCE_EXPRESSION (CALL_FUNCTION socket_receive client_socket 4096)))
        
        ; Parse HTTP request
        (DECLARE_VARIABLE (NAME "request") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE request)
          (SOURCE_EXPRESSION (CALL_FUNCTION parse_request request_data)))
        
        ; Create response based on request
        (DECLARE_VARIABLE (NAME "response") (TYPE STRING))
        (DECLARE_VARIABLE (NAME "response_body") (TYPE STRING))
        
        ; Simple routing
        (IF_CONDITION
          (PREDICATE_EQUALS (CALL_FUNCTION is_get request) 1)
          (THEN_EXECUTE
            ; Create JSON response
            (DECLARE_VARIABLE (NAME "json_data") (TYPE STRING))
            (DECLARE_VARIABLE (NAME "json_obj") (TYPE STRING))
            
            (ASSIGN
              (TARGET_VARIABLE json_obj)
              (SOURCE_EXPRESSION (CALL_FUNCTION create_object)))
            
            (ASSIGN
              (TARGET_VARIABLE json_obj)
              (SOURCE_EXPRESSION (CALL_FUNCTION json_set_field json_obj "message" "Hello from AetherScript!")))
            
            (ASSIGN
              (TARGET_VARIABLE json_obj)
              (SOURCE_EXPRESSION (CALL_FUNCTION json_set_field json_obj "status" "success")))
            
            (ASSIGN
              (TARGET_VARIABLE response_body)
              (SOURCE_EXPRESSION (CALL_FUNCTION stringify_json json_obj)))
            
            (ASSIGN
              (TARGET_VARIABLE response)
              (SOURCE_EXPRESSION (CALL_FUNCTION json_response response_body 200)))
          )
          (ELSE_EXECUTE
            ; Method not allowed
            (ASSIGN
              (TARGET_VARIABLE response)
              (SOURCE_EXPRESSION (CALL_FUNCTION create_response 405 "Method Not Allowed")))
          ))
        
        ; Send response
        (CALL_FUNCTION socket_send client_socket response)
        
        ; Close client connection
        (CALL_FUNCTION socket_close client_socket)
        
        (RETURN_VALUE 0)
      ))
    
    ; Example route handler for /api/data
    (DEFINE_FUNCTION
      (NAME handle_api_data)
      (ACCEPTS_PARAMETER (NAME "request") (TYPE STRING))
      (RETURNS STRING)
      (BODY
        ; Create sample data
        (DECLARE_VARIABLE (NAME "data_array") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE data_array)
          (SOURCE_EXPRESSION (CALL_FUNCTION create_array)))
        
        ; Add some items
        (ASSIGN
          (TARGET_VARIABLE data_array)
          (SOURCE_EXPRESSION (CALL_FUNCTION json_array_push data_array (CALL_FUNCTION from_string "Item 1"))))
        
        (ASSIGN
          (TARGET_VARIABLE data_array)
          (SOURCE_EXPRESSION (CALL_FUNCTION json_array_push data_array (CALL_FUNCTION from_string "Item 2"))))
        
        (ASSIGN
          (TARGET_VARIABLE data_array)
          (SOURCE_EXPRESSION (CALL_FUNCTION json_array_push data_array (CALL_FUNCTION from_string "Item 3"))))
        
        ; Create response object
        (DECLARE_VARIABLE (NAME "response_obj") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE response_obj)
          (SOURCE_EXPRESSION (CALL_FUNCTION create_object)))
        
        (ASSIGN
          (TARGET_VARIABLE response_obj)
          (SOURCE_EXPRESSION (CALL_FUNCTION json_set_field response_obj "items" data_array)))
        
        (ASSIGN
          (TARGET_VARIABLE response_obj)
          (SOURCE_EXPRESSION (CALL_FUNCTION json_set_field response_obj "count" (CALL_FUNCTION from_integer (CALL_FUNCTION json_array_length data_array)))))
        
        (RETURN_VALUE (CALL_FUNCTION json_response (CALL_FUNCTION stringify_json response_obj) 200))
      ))
  ))