(DEFINE_MODULE
  (NAME string)
  (INTENT "String manipulation functions for AetherScript")
  (CONTENT
    ; Import core module
    (IMPORT_MODULE (NAME std_core))
    
    ; Export string functions
    (EXPORTS_FUNCTION (NAME string_length))
    (EXPORTS_FUNCTION (NAME string_concat))
    (EXPORTS_FUNCTION (NAME string_substring))
    (EXPORTS_FUNCTION (NAME string_index_of))
    (EXPORTS_FUNCTION (NAME string_contains))
    (EXPORTS_FUNCTION (NAME string_starts_with))
    (EXPORTS_FUNCTION (NAME string_ends_with))
    (EXPORTS_FUNCTION (NAME string_trim))
    (EXPORTS_FUNCTION (NAME string_split))
    (EXPORTS_FUNCTION (NAME string_join))
    (EXPORTS_FUNCTION (NAME string_to_upper))
    (EXPORTS_FUNCTION (NAME string_to_lower))
    (EXPORTS_FUNCTION (NAME to_string))
    (EXPORTS_FUNCTION (NAME parse_int))
    (EXPORTS_FUNCTION (NAME parse_float))
    
    ; External string functions
    (DECLARE_EXTERNAL_FUNCTION
      (NAME strlen)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (RETURNS INTEGER)
      (CALLING_CONVENTION C))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME strcat)
      (ACCEPTS_PARAMETER (NAME "dest") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "src") (TYPE STRING))
      (RETURNS STRING)
      (CALLING_CONVENTION C))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME strstr)
      (ACCEPTS_PARAMETER (NAME "haystack") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "needle") (TYPE STRING))
      (RETURNS STRING)
      (CALLING_CONVENTION C))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME strcmp)
      (ACCEPTS_PARAMETER (NAME "s1") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "s2") (TYPE STRING))
      (RETURNS INTEGER)
      (CALLING_CONVENTION C))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME atoi)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (RETURNS INTEGER)
      (CALLING_CONVENTION C))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME atof)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (RETURNS FLOAT)
      (CALLING_CONVENTION C))
    
    ; String length
    (DEFINE_FUNCTION
      (NAME string_length)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (RETURNS INTEGER)
      (METADATA
        (COMPLEXITY "O(n)")
        (MEMORY "stack-only"))
      (BODY
        (RETURN_VALUE (CALL_FUNCTION strlen (VARIABLE_REFERENCE str)))
      ))
    
    ; String concatenation
    (DEFINE_FUNCTION
      (NAME string_concat)
      (ACCEPTS_PARAMETER (NAME "str1") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "str2") (TYPE STRING))
      (RETURNS STRING)
      (METADATA
        (COMPLEXITY "O(n+m)")
        (MEMORY "heap-allocated"))
      (BODY
        ; Allocate new string buffer
        (DECLARE_VARIABLE (NAME "len1") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE len1)
          (SOURCE_EXPRESSION (CALL_FUNCTION strlen (VARIABLE_REFERENCE str1))))
        
        (DECLARE_VARIABLE (NAME "len2") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE len2)
          (SOURCE_EXPRESSION (CALL_FUNCTION strlen (VARIABLE_REFERENCE str2))))
        
        (DECLARE_VARIABLE (NAME "result") (TYPE STRING))
        ; TODO: Implement actual string allocation and copying
        
        (RETURN_VALUE (VARIABLE_REFERENCE result))
      ))
    
    ; Check if string contains substring
    (DEFINE_FUNCTION
      (NAME string_contains)
      (ACCEPTS_PARAMETER (NAME "haystack") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "needle") (TYPE STRING))
      (RETURNS BOOLEAN)
      (METADATA
        (COMPLEXITY "O(n*m)")
        (MEMORY "stack-only"))
      (BODY
        (DECLARE_VARIABLE (NAME "result") (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION 
            (CALL_FUNCTION strstr 
              (VARIABLE_REFERENCE haystack)
              (VARIABLE_REFERENCE needle))))
        
        (RETURN_VALUE 
          (PREDICATE_NOT_EQUALS (VARIABLE_REFERENCE result) 0))
      ))
    
    ; Check if string starts with prefix
    (DEFINE_FUNCTION
      (NAME string_starts_with)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "prefix") (TYPE STRING))
      (RETURNS BOOLEAN)
      (METADATA
        (COMPLEXITY "O(m)")
        (MEMORY "stack-only"))
      (BODY
        (DECLARE_VARIABLE (NAME "prefix_len") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE prefix_len)
          (SOURCE_EXPRESSION (CALL_FUNCTION strlen (VARIABLE_REFERENCE prefix))))
        
        (DECLARE_VARIABLE (NAME "str_len") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE str_len)
          (SOURCE_EXPRESSION (CALL_FUNCTION strlen (VARIABLE_REFERENCE str))))
        
        ; Check if string is shorter than prefix
        (IF_CONDITION
          (PREDICATE_LESS_THAN (VARIABLE_REFERENCE str_len) (VARIABLE_REFERENCE prefix_len))
          (THEN_EXECUTE (RETURN_VALUE false))
        )
        
        ; Compare first n characters
        ; TODO: Implement substring comparison
        (RETURN_VALUE true)
      ))
    
    ; Convert value to string
    (DEFINE_FUNCTION
      (NAME to_string)
      (ACCEPTS_PARAMETER (NAME "value") (TYPE ANY))
      (RETURNS STRING)
      (METADATA
        (COMPLEXITY "O(n)")
        (MEMORY "heap-allocated"))
      (BODY
        ; TODO: Implement type-based string conversion
        (RETURN_VALUE "")
      ))
    
    ; Parse integer from string
    (DEFINE_FUNCTION
      (NAME parse_int)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (RETURNS INTEGER)
      (METADATA
        (COMPLEXITY "O(n)")
        (MEMORY "stack-only")
        (THROWS "ParseError"))
      (BODY
        (DECLARE_VARIABLE (NAME "result") (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (CALL_FUNCTION atoi (VARIABLE_REFERENCE str))))
        
        ; TODO: Add error checking for invalid input
        
        (RETURN_VALUE (VARIABLE_REFERENCE result))
      ))
    
    ; Parse float from string
    (DEFINE_FUNCTION
      (NAME parse_float)
      (ACCEPTS_PARAMETER (NAME "str") (TYPE STRING))
      (RETURNS FLOAT)
      (METADATA
        (COMPLEXITY "O(n)")
        (MEMORY "stack-only")
        (THROWS "ParseError"))
      (BODY
        (DECLARE_VARIABLE (NAME "result") (TYPE FLOAT))
        (ASSIGN
          (TARGET_VARIABLE result)
          (SOURCE_EXPRESSION (CALL_FUNCTION atof (VARIABLE_REFERENCE str))))
        
        ; TODO: Add error checking for invalid input
        
        (RETURN_VALUE (VARIABLE_REFERENCE result))
      ))
  ))