(DEFINE_MODULE
  (NAME test_tcp_echo)
  (INTENT "Simple TCP echo server demonstration")
  (CONTENT
    ; Declare external functions
    (DECLARE_EXTERNAL_FUNCTION
      (NAME printf)
      (LIBRARY "libc")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "format") (TYPE STRING)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_listen)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "port") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_accept)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "listener_id") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_read)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "buffer") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "buffer_size") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_write)
      (LIBRARY "aether_runtime")
      (RETURNS INTEGER)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER))
      (ACCEPTS_PARAMETER (NAME "data") (TYPE STRING))
      (ACCEPTS_PARAMETER (NAME "data_size") (TYPE INTEGER)))
    
    (DECLARE_EXTERNAL_FUNCTION
      (NAME tcp_close)
      (LIBRARY "aether_runtime")
      (RETURNS VOID)
      (ACCEPTS_PARAMETER (NAME "socket_id") (TYPE INTEGER)))
    
    (DEFINE_FUNCTION
      (NAME main)
      (RETURNS INTEGER)
      (BODY
        ; Create TCP listener on port 8080
        (DECLARE_VARIABLE (NAME listener) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE listener)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_listen 9999)))
        
        ; Check if listener was created successfully
        (IF_CONDITION
          (PREDICATE_LESS_THAN listener 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to create TCP listener on port 9999\n")
          )
        )
        
        (CALL_FUNCTION printf "Echo server listening on port 9999...\n")
        
        ; Accept one connection
        (DECLARE_VARIABLE (NAME client) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE client)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_accept listener)))
        
        (IF_CONDITION
          (PREDICATE_LESS_THAN client 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Failed to accept connection\n")
          )
        )
        
        (CALL_FUNCTION printf "Client connected!\n")
        
        ; Simple echo: read and write back once
        ; Note: In a real implementation, we'd allocate a buffer properly
        ; For now, we'll use a string literal as a placeholder for the buffer
        (DECLARE_VARIABLE (NAME buffer) (TYPE STRING))
        (ASSIGN
          (TARGET_VARIABLE buffer)
          (SOURCE_EXPRESSION "                                                                                                                                                                                                                                                        "))
        
        (DECLARE_VARIABLE (NAME bytes_read) (TYPE INTEGER))
        (ASSIGN
          (TARGET_VARIABLE bytes_read)
          (SOURCE_EXPRESSION (CALL_FUNCTION tcp_read client buffer 256)))
        
        (IF_CONDITION
          (PREDICATE_GREATER_THAN bytes_read 0)
          (THEN_EXECUTE
            (CALL_FUNCTION printf "Received %d bytes\n" bytes_read)
          )
        )
        
        ; Clean up
        (CALL_FUNCTION tcp_close client)
        (CALL_FUNCTION tcp_close listener)
        
        (CALL_FUNCTION printf "Server shutdown\n")
        
        (RETURN_VALUE 0)
      ))
  ))